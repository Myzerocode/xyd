[
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction",
    "pageTitle": "Why xyd?",
    "headingLevel": 1,
    "headingTitle": "Why xyd?",
    "summary": "",
    "content": "Why \nxyd\n?\nWelcome to xyd, the documentation platform built for developers who value simplicity and power. We're redefining the documentation experience by making it intuitive, flexible, and enjoyable.\nWelcome to \nxyd\n, the documentation platform built for developers who value simplicity and power. We're redefining the documentation experience by making it intuitive, flexible, and enjoyable."
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#features-at-a-glance",
    "pageTitle": "Why xyd?",
    "headingLevel": 2,
    "headingTitle": "Features at a Glance",
    "content": "Features at a Glance\nxyd is an all-in-one platform with everything needed to create beautiful, functional documentation:\nxyd\n is an all-in-one platform with everything needed to create beautiful, functional documentation:\nModern Development: Built with Node.js, featuring hot reloading and a developer-friendly CLIRich Components: Pre-built elements like Guide Cards, Callouts, and interactive Code SamplesFlexible Theming: Customize your site's appearance with our intuitive theming systemAPI Documentation: First-class support for GraphQL and OpenAPI specificationsMarkdown Extensions: Enhanced content creation with advanced formatting options\n- Modern Development: Built with Node.js, featuring hot reloading and a developer-friendly CLI\nModern Development: Built with Node.js, featuring hot reloading and a developer-friendly CLI\nModern Development\n[Modern Development](/docs/guides/quickstart)\nModern Development\n: Built with Node.js, featuring hot reloading and a developer-friendly CLI\n- Rich Components: Pre-built elements like Guide Cards, Callouts, and interactive Code Samples\nRich Components: Pre-built elements like Guide Cards, Callouts, and interactive Code Samples\nRich Components\n[Rich Components](/docs/components)\nRich Components\n: Pre-built elements like Guide Cards, Callouts, and interactive Code Samples\n- Flexible Theming: Customize your site's appearance with our intuitive theming system\nFlexible Theming: Customize your site's appearance with our intuitive theming system\nFlexible Theming\n[Flexible Theming](/docs/guides/themes)\nFlexible Theming\n: Customize your site's appearance with our intuitive theming system\n- API Documentation: First-class support for GraphQL and OpenAPI specifications\nAPI Documentation: First-class support for GraphQL and OpenAPI specifications\nAPI Documentation\n[API Documentation](/docs/guides/graphql)\nAPI Documentation\n: First-class support for GraphQL and OpenAPI specifications\n- Markdown Extensions: Enhanced content creation with advanced formatting options\nMarkdown Extensions: Enhanced content creation with advanced formatting options\nMarkdown Extensions\n[Markdown Extensions](/docs/guides/markdown-extensions)\nMarkdown Extensions\n: Enhanced content creation with advanced formatting options",
    "summary": ""
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#developer-first-philosophy",
    "pageTitle": "Why xyd?",
    "headingLevel": 2,
    "headingTitle": "Developer-First Philosophy",
    "content": "Developer-First Philosophy\nWe've designed xyd with developers at the center of our thinking. Documentation should be as enjoyable to create as it is helpful to read.\nWe've designed \nxyd\n with developers at the center of our thinking. Documentation should be as enjoyable to create as it is helpful to read.\nThe CLI-first approach gets you started with just a few commands—no complex configuration files or steep learning curves. Write in Markdown and let xyd handle the rest. With hot reloading, see your changes instantly as you work, making the development process smooth and efficient.\nThe CLI-first approach gets you started with just a few commands—no complex configuration files or steep learning curves. Write in Markdown and let \nxyd\n handle the rest. With hot reloading, see your changes instantly as you work, making the development process smooth and efficient.",
    "summary": ""
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#content-rich-architecture",
    "pageTitle": "Why xyd?",
    "headingLevel": 2,
    "headingTitle": "Content-Rich Architecture",
    "content": "Content-Rich Architecture\nUnlike traditional site generators that prioritize technical aspects, xyd puts your content first. We've built the platform with a focus on typography, readability, and user experience to ensure your documentation effectively communicates with readers.\nUnlike traditional site generators that prioritize technical aspects, \nxyd\n puts your content first. We've built the platform with a focus on typography, readability, and user experience to ensure your documentation effectively communicates with readers.\nOur component system enhances your content rather than overshadowing it. From interactive code samples with live editing to executable snippets that demonstrate functionality in real-time, xyd provides everything needed to make your documentation both engaging and informative. Users can experiment with code directly in the browser, seeing results instantly without leaving your documentation.\nOur component system enhances your content rather than overshadowing it. From interactive code samples with live editing to executable snippets that demonstrate functionality in real-time, \nxyd\n provides everything needed to make your documentation both engaging and informative. Users can experiment with code directly in the browser, seeing results instantly without leaving your documentation.",
    "summary": ""
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#api-documentation-excellence",
    "pageTitle": "Why xyd?",
    "headingLevel": 2,
    "headingTitle": "API Documentation Excellence",
    "content": "API Documentation Excellence\nxyd delivers exceptional API documentation through comprehensive integration capabilities that make documenting APIs straightforward and maintainable. Our approach to API documentation focuses on accuracy, readability, and developer experience to ensure that your API documentation remains a reliable resource for your users.\nxyd\n delivers exceptional API documentation through comprehensive integration capabilities that make documenting APIs straightforward and maintainable. Our approach to API documentation focuses on accuracy, readability, and developer experience to ensure that your API documentation remains a reliable resource for your users.",
    "summary": ""
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#automatic-documentation-generation",
    "pageTitle": "Why xyd?",
    "headingLevel": 3,
    "headingTitle": "Automatic Documentation Generation",
    "content": "Automatic Documentation Generation\nThe platform leverages your existing codebase to generate accurate and comprehensive documentation automatically, ensuring your documentation always reflects your current implementation:\nThe platform leverages your existing codebase to generate accurate and comprehensive documentation automatically, ensuring your documentation always reflects your current implementation:\nGraphQL Schema: Import your GraphQL schema and xyd will generate complete documentation with detailed type information, queries, mutations, and examples. The system automatically identifies relationships between types and presents them in a way that's easy to understand.OpenAPI/Swagger: Connect your OpenAPI or Swagger specifications to create beautiful, structured API documentation. xyd transforms technical specifications into user-friendly documentation with organized endpoints, parameter details, and formatted response examples that help users quickly understand how to interact with your API.TypeScript Definitions: Generate documentation directly from your TypeScript type definitions and interfaces. This approach ensures your documentation stays synchronized with your code as it evolves, reducing maintenance overhead and eliminating documentation drift.\n- GraphQL Schema: Import your GraphQL schema and xyd will generate complete documentation with detailed type information, queries, mutations, and examples. The system automatically identifies relationships between types and presents them in a way that's easy to understand.\nGraphQL Schema: Import your GraphQL schema and xyd will generate complete documentation with detailed type information, queries, mutations, and examples. The system automatically identifies relationships between types and presents them in a way that's easy to understand.\nGraphQL Schema\n[GraphQL Schema](/docs/guides/graphql)\nGraphQL Schema\n: Import your GraphQL schema and \nxyd\n will generate complete documentation with detailed type information, queries, mutations, and examples. The system automatically identifies relationships between types and presents them in a way that's easy to understand.\n- OpenAPI/Swagger: Connect your OpenAPI or Swagger specifications to create beautiful, structured API documentation. xyd transforms technical specifications into user-friendly documentation with organized endpoints, parameter details, and formatted response examples that help users quickly understand how to interact with your API.\nOpenAPI/Swagger: Connect your OpenAPI or Swagger specifications to create beautiful, structured API documentation. xyd transforms technical specifications into user-friendly documentation with organized endpoints, parameter details, and formatted response examples that help users quickly understand how to interact with your API.\nOpenAPI/Swagger\n[OpenAPI/Swagger](/docs/guides/openapi)\nOpenAPI/Swagger\n: Connect your OpenAPI or Swagger specifications to create beautiful, structured API documentation. \nxyd\n transforms technical specifications into user-friendly documentation with organized endpoints, parameter details, and formatted response examples that help users quickly understand how to interact with your API.\n- TypeScript Definitions: Generate documentation directly from your TypeScript type definitions and interfaces. This approach ensures your documentation stays synchronized with your code as it evolves, reducing maintenance overhead and eliminating documentation drift.\nTypeScript Definitions: Generate documentation directly from your TypeScript type definitions and interfaces. This approach ensures your documentation stays synchronized with your code as it evolves, reducing maintenance overhead and eliminating documentation drift.\nTypeScript Definitions\n[TypeScript Definitions](/docs/guides/typescript)\nTypeScript Definitions\n: Generate documentation directly from your TypeScript type definitions and interfaces. This approach ensures your documentation stays synchronized with your code as it evolves, reducing maintenance overhead and eliminating documentation drift.",
    "summary": ""
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#customizable-api-reference-pages",
    "pageTitle": "Why xyd?",
    "headingLevel": 3,
    "headingTitle": "Customizable API Reference Pages",
    "content": "Customizable API Reference Pages\nThe platform provides robust tools for creating custom API reference pages that meet your specific documentation needs:\nThe platform provides robust tools for creating custom API reference pages that meet your specific documentation needs:\nCustom Endpoint Documentation: Create detailed documentation for each API endpoint with customizable sections for parameters, request examples, response formats, and error handling.Versioning Support: Maintain documentation for multiple API versions side by side, making it easy for users to find information relevant to the version they're using.Code Sample Generation: Automatically generate code samples in multiple programming languages to show how to interact with your API, helping users quickly implement your API in their preferred language.\n- Custom Endpoint Documentation: Create detailed documentation for each API endpoint with customizable sections for parameters, request examples, response formats, and error handling.\nCustom Endpoint Documentation: Create detailed documentation for each API endpoint with customizable sections for parameters, request examples, response formats, and error handling.\nCustom Endpoint Documentation\nCustom Endpoint Documentation\n: Create detailed documentation for each API endpoint with customizable sections for parameters, request examples, response formats, and error handling.\n- Versioning Support: Maintain documentation for multiple API versions side by side, making it easy for users to find information relevant to the version they're using.\nVersioning Support: Maintain documentation for multiple API versions side by side, making it easy for users to find information relevant to the version they're using.\nVersioning Support\nVersioning Support\n: Maintain documentation for multiple API versions side by side, making it easy for users to find information relevant to the version they're using.\n- Code Sample Generation: Automatically generate code samples in multiple programming languages to show how to interact with your API, helping users quickly implement your API in their preferred language.\nCode Sample Generation: Automatically generate code samples in multiple programming languages to show how to interact with your API, helping users quickly implement your API in their preferred language.\nCode Sample Generation\nCode Sample Generation\n: Automatically generate code samples in multiple programming languages to show how to interact with your API, helping users quickly implement your API in their preferred language.",
    "summary": ""
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#simplified-for-developers-built-for-everyone",
    "pageTitle": "Why xyd?",
    "headingLevel": 2,
    "headingTitle": "Simplified for Developers. Built for Everyone.",
    "content": "Simplified for Developers. Built for Everyone.\nWe've streamlined the entire documentation process—from writing and reviewing to publishing and maintaining. Our API-first approach with extensive customization options means you can tailor xyd to your specific requirements.\nWe've streamlined the entire documentation process—from writing and reviewing to publishing and maintaining. Our API-first approach with extensive customization options means you can tailor \nxyd\n to your specific requirements.\nWhether building a simple documentation site or a complex developer portal, xyd offers the flexibility to meet your needs while removing unnecessary complexity.\nWhether building a simple documentation site or a complex developer portal, \nxyd\n offers the flexibility to meet your needs while removing unnecessary complexity.",
    "summary": ""
  },
  {
    "pageId": "why-xyd",
    "pageUrl": "/docs/guides/introduction#ideal-use-cases",
    "pageTitle": "Why xyd?",
    "headingLevel": 2,
    "headingTitle": "Ideal Use Cases",
    "content": "Ideal Use Cases\n<br/>\n`xyd` is perfect for a variety of documentation needs:\nTechnical Documentation: Create comprehensive guides for APIs, libraries, and frameworksProduct Documentation: Document your products with beautiful, interactive guidesDeveloper Portals: Build portals at scaleKnowledge Bases: Create resources that help users find answers quickly\n- Technical Documentation: Create comprehensive guides for APIs, libraries, and frameworks\nTechnical Documentation: Create comprehensive guides for APIs, libraries, and frameworks\nTechnical Documentation\n[Technical Documentation](/docs/guides/writing-quickstart)\nTechnical Documentation\n: Create comprehensive guides for APIs, libraries, and frameworks\n- Product Documentation: Document your products with beautiful, interactive guides\nProduct Documentation: Document your products with beautiful, interactive guides\nProduct Documentation\n[Product Documentation](/docs/guides/customization-introduction)\nProduct Documentation\n: Document your products with beautiful, interactive guides\n- Developer Portals: Build portals at scale\nDeveloper Portals: Build portals at scale\nDeveloper Portals\n[Developer Portals](/docs/guides/routing)\nDeveloper Portals\n: Build portals at scale\n- Knowledge Bases: Create resources that help users find answers quickly\nKnowledge Bases: Create resources that help users find answers quickly\nKnowledge Bases\n[Knowledge Bases](/docs/guides/settings)\nKnowledge Bases\n: Create resources that help users find answers quickly\nReady to transform your documentation experience? Get started now.\nReady to transform your documentation experience? \n[Get started now](/docs/guides/quickstart)\nGet started now\n.",
    "summary": ""
  },
  {
    "pageId": "quickstart",
    "pageUrl": "/docs/guides/quickstart",
    "pageTitle": "Quickstart",
    "headingLevel": 1,
    "headingTitle": "Quickstart",
    "summary": "",
    "content": "Quickstart\nStart building modern documentation in record time\nStart building modern documentation in record time\nStart building modern documentation in record time\nFollow the instructions below to learn how to deploy,\nupdate and supercharge your documentation with <code>xyd</code>.\nFollow the instructions below to learn how to deploy,\nupdate and supercharge your documentation with \n<code>\nxyd\n</code>\n.\nPrerequisite: Please install Node.js (version 19 or higher) before proceeding.\nPrerequisite: Please install Node.js (version 19 or higher) before proceeding.\nPrerequisite:\nPrerequisite:\n Please install Node.js (version 19 or higher) before proceeding.\n<!-- <UnderlineNav value={activeTab}>\n    <UnderlineNav.Item value=\"cli\" href=\"#cli\">\n        CLI\n    </UnderlineNav.Item>\n    <UnderlineNav.Item value=\"code\" href=\"#code\">\n        Code\n    </UnderlineNav.Item>\n</UnderlineNav>  -->\nStep 1: Install the <code>xyd</code> CLI:\nStep 1:\nStep 1:\n Install the \n<code>\nxyd\n</code>\n CLI:\nStep 2: Navigate to the docs directory (where the settings file is located) and execute the following command:\nStep 2:\nStep 2:\n Navigate to the docs directory (where the settings file is located) and execute the following command:\nxyd"
  },
  {
    "pageId": "quickstart",
    "pageUrl": "/docs/guides/quickstart#cli-versioning",
    "pageTitle": "Quickstart",
    "headingLevel": 2,
    "headingTitle": "CLI versioning",
    "content": "CLI versioning\nPlease note that each CLI release is associated with a specific version of <code>xyd</code>.\nIf your local website doesn’t align with the production version, please update the CLI:\nPlease note that each CLI release is associated with a specific version of \n<code>\nxyd\n</code>\n.\nIf your local website doesn’t align with the production version, please update the CLI:",
    "summary": ""
  },
  {
    "pageId": "quickstart",
    "pageUrl": "/docs/guides/quickstart#publishing",
    "pageTitle": "Quickstart",
    "headingLevel": 2,
    "headingTitle": "Publishing",
    "content": "Publishing\nPublishing changes depends on your preferences, the simplest way is to\nuse the one of infrastructure provider slike Netlify or Vercel.\nLearn more about publishing\nPublishing changes depends on your preferences, the simplest way is to\nuse the one of infrastructure provider slike Netlify or Vercel.\nLearn more about \n[publishing](/docs/deploy)\npublishing",
    "summary": ""
  },
  {
    "pageId": "deploy-your-xyd-docs",
    "pageUrl": "/docs/guides/deploy",
    "pageTitle": "Deploy your xyd docs",
    "headingLevel": 1,
    "headingTitle": "Deploy your xyd docs",
    "summary": "",
    "content": "Deploy your \nxyd\n docs\nLearn how to make your docs available to the public\nLearn how to make your docs available to the public\nLearn how to make your docs available to the public\nYou must follow the following steps to deploy your xyd docs:\nYou must follow the following steps to deploy your \nxyd\n docs:\nThe <code>xyd</code> site is inside the docs directory of your project.You are using the default build output directory (.xyd/build).xyd is installed on your computer locally as CLI or package.json dependency.\n- The <code>xyd</code> site is inside the docs directory of your project.\nThe <code>xyd</code> site is inside the docs directory of your project.\nThe \n<code>\nxyd\n</code>\n site is inside the docs directory of your project.\n- You are using the default build output directory (.xyd/build).\nYou are using the default build output directory (.xyd/build).\nYou are using the default build output directory (.xyd/build).\n- xyd is installed on your computer locally as CLI or package.json dependency.\nxyd is installed on your computer locally as CLI or package.json dependency.\n[xyd](http://npmjs.com/package/xyd-js)\nxyd\n is installed on your computer locally as CLI or package.json dependency."
  },
  {
    "pageId": "deploy-your-xyd-docs",
    "pageUrl": "/docs/guides/deploy#build-and-test",
    "pageTitle": "Deploy your xyd docs",
    "headingLevel": 2,
    "headingTitle": "Build and test",
    "content": "Build and test\nCLICodeRun this command to build the docs:\n<br/>$ xyd buildOnce built, preview it locally by running:\n<br/>$ xyd startYou can also configure the port of the server by passing --port as an argument.\n<br/>$ xyd start --port 3000 <br/>\n Now you can visit [`http://localhost:3000`](http://localhost:3000)` to see the preview.Find you best code\n<br/>console.log(5)Check if it works\n<br/>$ xyd start\nCLI\nCLI\nCode\nCode\nRun this command to build the docs:\n<br/>$ xyd buildOnce built, preview it locally by running:\n<br/>$ xyd startYou can also configure the port of the server by passing --port as an argument.\n<br/>$ xyd start --port 3000 <br/>\n Now you can visit [`http://localhost:3000`](http://localhost:3000)` to see the preview.\nRun this command to build the docs:\n<br/>$ xyd buildOnce built, preview it locally by running:\n<br/>$ xyd startYou can also configure the port of the server by passing --port as an argument.\n<br/>$ xyd start --port 3000 <br/>\n Now you can visit [`http://localhost:3000`](http://localhost:3000)` to see the preview.\nRun this command to build the docs:\n<br/>$ xyd build\nRun this command to build the docs:\n<br/>\nRun this command to build the docs:\n\n<br/>\n$ xyd build\nOnce built, preview it locally by running:\n<br/>$ xyd start\nOnce built, preview it locally by running:\n<br/>\nOnce built, preview it locally by running:\n\n<br/>\n$ xyd start\nYou can also configure the port of the server by passing --port as an argument.\n<br/>$ xyd start --port 3000 <br/>\n Now you can visit [`http://localhost:3000`](http://localhost:3000)` to see the preview.\nYou can also configure the port of the server by passing --port as an argument.\n<br/>\nYou can also configure the port of the server by passing --port as an argument.\n\n<br/>\n$ xyd start --port 3000\n <br/>\n Now you can visit [`http://localhost:3000`](http://localhost:3000)` to see the preview.\nFind you best code\n<br/>console.log(5)Check if it works\n<br/>$ xyd start\nFind you best code\n<br/>console.log(5)Check if it works\n<br/>$ xyd start\nFind you best code\n<br/>console.log(5)\nFind you best code\n<br/>\nFind you best code\n\n<br/>\nconsole.log(5)\nCheck if it works\n<br/>$ xyd start\nCheck if it works\n<br/>\nCheck if it works\n\n<br/>\n$ xyd start\n<br/>\n<br/>",
    "summary": ""
  },
  {
    "pageId": "deploy-your-xyd-docs",
    "pageUrl": "/docs/guides/deploy#deployment-providers",
    "pageTitle": "Deploy your xyd docs",
    "headingLevel": 2,
    "headingTitle": "Deployment Providers",
    "content": "Deployment Providers",
    "summary": ""
  },
  {
    "pageId": "deploy-your-xyd-docs",
    "pageUrl": "/docs/guides/deploy#netlify--vercel--cloudflare-pages",
    "pageTitle": "Deploy your xyd docs",
    "headingLevel": 4,
    "headingTitle": "Netlify / Vercel / Cloudflare Pages",
    "content": "Netlify / Vercel / Cloudflare Pages",
    "summary": ""
  },
  {
    "pageId": "settings",
    "pageUrl": "/docs/guides/settings",
    "pageTitle": "Settings",
    "headingLevel": 1,
    "headingTitle": "Settings",
    "summary": "",
    "content": "Settings\nConfigure your documentation using the configuration file\nConfigure your documentation using the configuration file\nConfigure your documentation using the configuration file\nThe settings file is the central configuration hub for your documentation.\nYou can use either xyd.json for a simple configuration or xyd.ts|x if you prefer a more dynamic TypeScript/React based approach.\nThe settings file is the central configuration hub for your documentation.\nYou can use either \nxyd.json\n for a simple configuration or \nxyd.ts|x\n if you prefer a more dynamic TypeScript/React based approach.\nTypeScript/React based configuration is useful if you'd like to use programmatic control over the configuration.\nTypeScript/React based configuration is useful if you'd like to use programmatic control over the configuration.\nTypeScript/React based configuration is useful if you'd like to use programmatic control over the configuration.\nThis configuration file controls the look and feel of your documentation, including navigation structure, integrations, analytics tracking, and custom behaviors.\nThis configuration file controls the look and feel of your documentation, including navigation structure, integrations, analytics tracking, and custom behaviors.\nSource code of settings is available here.\nSource code of settings is available here.\nSource code of \nsettings\n is available \n[here](https://github.com/livesession/xyd/blob/master/packages/xyd-core/src/types/settings.ts)\nhere\n."
  },
  {
    "pageId": "settings",
    "pageUrl": "/docs/guides/settings#properties",
    "pageTitle": "Settings",
    "headingLevel": 2,
    "headingTitle": "Properties",
    "content": "Properties",
    "summary": ""
  },
  {
    "pageId": "settings",
    "pageUrl": "/docs/guides/settings#xydjson",
    "pageTitle": "Settings",
    "headingLevel": 2,
    "headingTitle": "xyd.json",
    "content": "xyd.json\nThis is the simplest way to configure your documentation, you don't need to write any code.\nThis is the simplest way to configure your documentation, you don't need to write any code.",
    "summary": ""
  },
  {
    "pageId": "settings",
    "pageUrl": "/docs/guides/settings#json-schema-validation",
    "pageTitle": "Settings",
    "headingLevel": 3,
    "headingTitle": "JSON Schema Validation",
    "content": "JSON Schema Validation\nThe xyd.json file is validated against a JSON schema to ensure proper configuration. You can reference the schema by including:\nThe \nxyd.json\n file is validated against a JSON schema to ensure proper configuration. You can reference the schema by including:\n{\n    \"$schema\": \"https://xyd.dev/schema.json\"\n}\nif you use TS/React approuch you can do:\nif you use TS/React approuch you can do:\nimport { Settings } from 'xyd-js';\n\nexport default {\n    // ... your settings configuration here\n} satisfies Settings",
    "summary": ""
  },
  {
    "pageId": "settings",
    "pageUrl": "/docs/guides/settings#code-based-settings",
    "pageTitle": "Settings",
    "headingLevel": 2,
    "headingTitle": "Code-Based Settings",
    "content": "Code-Based Settings\nIf you feel that the JSON configuration is not enough, you can use the TypeScript/React based configuration\nto have more control and use APIs that are not available in the JSON configuration.\nIf you feel that the JSON configuration is not enough, you can use the TypeScript/React based configuration\nto have more control and use APIs that are not available in the JSON configuration.\nFor example, you could define a custom components, adds custom markdown plugins or other customization stuff.\nFor example, you could define a custom components, adds custom markdown plugins or other customization stuff.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing",
    "pageTitle": "Routing",
    "headingLevel": 1,
    "headingTitle": "Routing",
    "summary": "",
    "content": "Routing\nLearn how to navigate your docs\nLearn how to navigate your docs\nLearn how to navigate your docs"
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#file-convention-routing",
    "pageTitle": "Routing",
    "headingLevel": 2,
    "headingTitle": "File-Convention Routing",
    "content": "File-Convention Routing\n<code>xyd</code> uses file-convention routing by default, which means the generated HTML pages\nare mapped from the directory structure of the source Markdown files.\n<code>\nxyd\n</code>\n uses file-convention routing by default, which means the generated HTML pages\nare mapped from the directory structure of the source Markdown files.\nFor example, given the following directory structure:\nFor example, given the following directory structure:\n.\n├ docs\n│  └─ index.md\n│  └─ quickstart.md\n|\n├─ index.md\n├─ faq.md\n|\n└─ settings.json\nThe generated HTML pages will be:\nThe generated HTML pages will be:\nindex.md                  --> /index.html (accessible as /)\nfaq.md                    --> /faq.html\ndocs/index.md             --> /docs/index.html (accessible as /docs/)\ndocs/quickstart.md        --> /docs/quickstart.html \nFile-convention routing is powerful because you don't need any configuration but also has some limitations.\n<br/>\nIf you need more control over the routing, you can use the settings file to customize the routing.\nFile-convention routing is powerful because you don't need any configuration but also has some limitations.\n<br/>\nIf you need more control over the routing, you can use the settings file to customize the routing.\nFile-convention routing is powerful because you don't need any configuration but also has some limitations.\n\n<br/>\n\nIf you need more control over the routing, you can use the \n[settings](#)\nsettings\n file to customize the routing.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#settings-based-routing",
    "pageTitle": "Routing",
    "headingLevel": 2,
    "headingTitle": "Settings-Based Routing",
    "content": "Settings-Based Routing\nYou can customize the routing by adding a routes in settings.json|settings.ts|x file to your project.\nYou can customize the routing by adding a routes in \nsettings.json|settings.ts|x\n file to your project.\nThe navigation property controls the hierarchy of your documentation. It's grouped into multiple properties:\nThe \nnavigation\n property controls the hierarchy of your documentation. It's grouped into multiple properties:\nsidebar - Main navigation, usually displayed on the left side of the page.header - Sub navigation, usually displayed on the top of the page.anchors - Fixed navigation, helpful for displaying a static navigation/links.\n- sidebar - Main navigation, usually displayed on the left side of the page.\nsidebar - Main navigation, usually displayed on the left side of the page.\n[sidebar](#sidebar)\nsidebar\n - Main navigation, usually displayed on the left side of the page.\n- header - Sub navigation, usually displayed on the top of the page.\nheader - Sub navigation, usually displayed on the top of the page.\n[header](#header)\nheader\n - Sub navigation, usually displayed on the top of the page.\n- anchors - Fixed navigation, helpful for displaying a static navigation/links.\nanchors - Fixed navigation, helpful for displaying a static navigation/links.\n[anchors](#anchors)\nanchors\n - Fixed navigation, helpful for displaying a static navigation/links.\nDividing a navigation into multiple properties helps you to organize your documentation better.\nDividing a navigation into multiple properties helps you to organize your documentation better.\nDividing a \nnavigation\n into multiple properties helps you to organize your documentation better.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#sidebar",
    "pageTitle": "Routing",
    "headingLevel": 3,
    "headingTitle": "Sidebar",
    "content": "Sidebar\nIf you don't want any hierarchy, you can just define pages within your navigation field.\nEach entry of the pages array must be a path to a file that exists within your repo.\nIf you don't want any hierarchy, you can just define pages within your navigation field.\nEach entry of the pages array must be a path to a file that exists within your repo.\nNote you do not need to append .mdx to the file paths.\nNote you do not need to append .mdx to the file paths.\nNote you do not need to append \n.mdx\n to the file paths.\n{\n  \"navigation\": {\n    \"sidebar\": [\n      \"overview\",\n      \"quickstart\",\n      \"guides/introduction\"\n    ]\n  }\n}\nUsing this approach we got something functional to File-Convention Routing but also have the ability to customize the sidebar more.\nUsing this approach we got something functional to \n[File-Convention Routing](/#file-convention-routing)\nFile-Convention Routing\n but also have the ability to customize the sidebar more.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#groups-in-sidebar",
    "pageTitle": "Routing",
    "headingLevel": 4,
    "headingTitle": "Groups in Sidebar",
    "content": "Groups in Sidebar\nGroups allow you to group your pages. Groups can also be nested within each other.\nGroups allow you to group your pages. Groups can also be nested within each other.\n{\n  \"sidebar\": [\n    {\n        {\n            \"group\": \"Get Started\",\n            \"pages\": [\n                \"docs/guides/introduction\",\n                \"docs/guides/getting-started\",\n                \"docs/guides/deploy\"\n            ]\n        },\n        // ... other groups\n    }\n  ]\n}\ngroup property shows the name as the separator in the sidebar.\ngroup property shows the name as the separator in the sidebar.\ngroup\n property shows the name as the separator in the sidebar.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#routing-in-sidebar",
    "pageTitle": "Routing",
    "headingLevel": 4,
    "headingTitle": "Routing in Sidebar",
    "content": "Routing in Sidebar\nYou can also do more advanced routing in the sidebar, like matching based on the current route.\nYou can also do more advanced routing in the sidebar, like matching based on the current route.\n{\n    \"sidebar\": [\n        {\n            \"route\": \"docs\",\n            \"items\": [\n                {\n                    \"group\": \"Getting Started\",\n                    \"pages\": [\n                        \"docs/introduction\",\n                       \"docs/components\"\n                    ]\n                },\n                {\n                    \"group\": \"Guides\",\n                    \"pages\": [\n                        \"docs/guides/introduction\",\n                        \"docs/guides/components\"\n                    ]\n                }\n            ],\n        },\n        {\n            \"route\": \"docs/api\",\n            \"items\": [\n                {\n                    \"group\": \"API\",\n                    \"pages\": [\n                        \"docs/api/introduction\",\n                        \"docs/api/error-handling\",\n                    ]\n                }\n            ]\n        }\n    ]\n}\nThis approuch gives you more control over the routing and allows you to create more complex navigation structures.\nThis approuch gives you more control over the routing and allows you to create more complex navigation structures.\nThis approuch gives you more control over the routing and allows you to create more complex navigation structures.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#header",
    "pageTitle": "Routing",
    "headingLevel": 3,
    "headingTitle": "Header",
    "content": "Header\nThe header navigation allows you to create a top-level navigation bar.\nYou can also define a sub header for a specific route.\nThe header navigation allows you to create a top-level navigation bar.\nYou can also define a sub header for a specific route.\n{\n  \"navigation\": {\n    \"header\": [\n      {\n        \"name\": \"Documentation\",\n        \"url\": \"/docs\"\n      },\n      {\n        \"name\": \"API Reference\",\n        \"url\": \"/docs/api\"\n      },\n      {\n        \"sub\": {\n          \"route\": \"/docs/api\",\n          \"name\": \"API\",\n          \"items\": [\n            {\n              \"name\": \"Getting Started\",\n              \"url\": \"/docs/api\"\n            },\n            {\n              \"name\": \"Authentication\",\n              \"url\": \"/docs/api/auth\"\n            },\n          ]\n        }\n      },\n      {\n        \"sub\": {\n          \"route\": \"/docs/guides\",\n          \"name\": \"Guides\",\n          \"items\": [\n            {\n              \"name\": \"Quick Start\",\n              \"url\": \"/docs/guides/quickstart\"\n            },\n            {\n              \"name\": \"Tutorials\",\n              \"url\": \"/docs/guides/tutorials\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\nThe route property in sub header determines when the sub menu should be visible based on the current route.\nThe route property in sub header determines when the sub menu should be visible based on the current route.\nThe \nroute\n property in sub header determines when the sub menu should be visible based on the current route.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#anchors",
    "pageTitle": "Routing",
    "headingLevel": 3,
    "headingTitle": "Anchors",
    "content": "Anchors\nAnchors provide a way to add fixed navigation elements, typically at the bottom of the page. They're useful for displaying important external links or resources.\nAnchors provide a way to add fixed navigation elements, typically at the bottom of the page. They're useful for displaying important external links or resources.\n{\n  \"navigation\": {\n    \"anchors\": {\n      \"bottom\": [\n        {\n          \"icon\": \"icon-book\",\n          \"name\": \"Documentation\",\n          \"url\": \"https://docs.example.com\"\n        },\n        {\n          \"icon\": \"icon-users\",\n          \"name\": \"Community\",\n          \"url\": \"https://community.example.com\"\n        },\n        {\n          \"icon\": \"icon-code\",\n          \"name\": \"GitHub\",\n          \"url\": \"https://github.com/example\"\n        },\n        {\n          \"icon\": \"icon-chat\",\n          \"name\": \"Support\",\n          \"url\": \"https://support.example.com\"\n        }\n      ]\n    }\n  }\n}\nAnchors support icons and can be positioned at different parts of the page using the bottom property.\nAnchors support icons and can be positioned at different parts of the page using the bottom property.\nAnchors support icons and can be positioned at different parts of the page using the \nbottom\n property.",
    "summary": ""
  },
  {
    "pageId": "routing",
    "pageUrl": "/docs/guides/routing#samples",
    "pageTitle": "Routing",
    "headingLevel": 2,
    "headingTitle": "Samples",
    "content": "Samples\nExplore our sample project to get started with file-convention routing.\nExplore our sample project to get started with file-convention routing.\nExplore our sample project to get started with file-convention routing.\nExplore our sample project to get started with settings-based routing.\nExplore our sample project to get started with settings-based routing.\nExplore our sample project to get started with settings-based routing.",
    "summary": ""
  },
  {
    "pageId": "themes",
    "pageUrl": "/docs/guides/themes",
    "pageTitle": "Themes",
    "headingLevel": 1,
    "headingTitle": "Themes",
    "summary": "",
    "content": "Themes\nCustomize the appearance of your documentation\nCustomize the appearance of your documentation\nCustomize the appearance of your documentation\nChoose from our pre-built themes to match your brand's unique style.\nChoose from our pre-built themes to match your brand's unique style."
  },
  {
    "pageId": "themes",
    "pageUrl": "/docs/guides/themes#setup",
    "pageTitle": "Themes",
    "headingLevel": 2,
    "headingTitle": "Setup",
    "content": "Setup\nYou can configure the theme in the settings file:\nYou can configure the theme in the \n[settings](/docs/guides/settings)\nsettings\n file:\n{\n  \"theme\": \"poetry\"\n}",
    "summary": ""
  },
  {
    "pageId": "themes",
    "pageUrl": "/docs/guides/themes#available-themes",
    "pageTitle": "Themes",
    "headingLevel": 2,
    "headingTitle": "Available themes",
    "content": "Available themes\npoetrycosmoopenergusto (coming soon)picasso (coming soon)\n- poetry\npoetry\npoetry\n- cosmo\ncosmo\ncosmo\n- opener\nopener\nopener\n- gusto (coming soon)\ngusto (coming soon)\ngusto\n (coming soon)\n- picasso (coming soon)\npicasso (coming soon)\npicasso\n (coming soon)",
    "summary": ""
  },
  {
    "pageId": "themes",
    "pageUrl": "/docs/guides/themes#customizing-the-theme",
    "pageTitle": "Themes",
    "headingLevel": 2,
    "headingTitle": "Customizing the theme",
    "content": "Customizing the theme\nYou can also customize the theme by Extending the Default Theme or\nCreating your own theme.\nYou can also customize the theme by \n[Extending the Default Theme](/docs/customizing-the-default-theme)\nExtending the Default Theme\n or\n\n[Creating your own theme](/docs/creating-your-own-theme)\nCreating your own theme\n.",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 1,
    "headingTitle": "Writing Quickstart",
    "summary": "",
    "content": "Writing Quickstart\nLearn how to write content and navigation metadata\nLearn how to write content and navigation metadata\nLearn how to write content and navigation metadata"
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#introduction",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 2,
    "headingTitle": "Introduction",
    "content": "Introduction\nEach page is md/mdx file that should follow frontmatter specification:\nEach page is \nmd\n/\nmdx\n file that should follow \n[frontmatter](https://jekyllrb.com/docs/front-matter/)\nfrontmatter\n specification:\n---\ntitle: My title\n---\nWriting metadata in frontmatter is required for navigation and optionaly for other metadata features like SEO.\nWriting metadata in frontmatter is required for navigation and optionaly for other \n[metadata](#)\nmetadata\n features like SEO.\nWhile MDX is powerful, xyd makes writing docs much easier using markdown special symbols.But you can still use pure MDX or both if you want.\nWhile MDX is powerful, xyd makes writing docs much easier using markdown special symbols.\nWhile MDX is powerful, xyd makes writing docs much easier using markdown \n[special symbols](/docs/guides/special-symbols)\nspecial symbols\n.\nBut you can still use pure MDX or both if you want.\nBut you can still use pure MDX or both if you want.",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#metadata-specification",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 2,
    "headingTitle": "Metadata Specification",
    "content": "Metadata Specification",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#title",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 3,
    "headingTitle": "Title",
    "content": "Title\nThe title field is used for the page title (SEO) and for the sidebar navigation item:\nThe title field is used for the page title (SEO) and for the sidebar navigation item:\n---\ntitle: Writing quickstart\n---\nyou can also set different title for sidebar:\nyou can also set different title for sidebar:\n---\ntitle: Writing quickstart # for SEO\nsidebarTitlte:  Quickstart # visible in sidebar\n---",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#description",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 3,
    "headingTitle": "Description",
    "content": "Description\nThe description field is used for SEO purposes and will be displayed in search engine results. It should be a concise summary of the page content.\nThe description field is used for SEO purposes and will be displayed in search engine results. It should be a concise summary of the page content.\n---\ntitle: My title\ndescription: A brief summary of what this page is about\n---",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#sidebar-icons",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 3,
    "headingTitle": "Sidebar icons",
    "content": "Sidebar icons\nYou can customize the sidebar icon for each page by specifying an icon name. The icon will be displayed next to the page title in the navigation.\nYou can customize the sidebar icon for each page by specifying an icon name. The icon will be displayed next to the page title in the navigation.\n---\ntitle: My title\nicon: book\n---\nList of available icons you can find here.\nList of available icons you can find \n[here](#)\nhere\n.",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#page-layout",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 3,
    "headingTitle": "Page layout",
    "content": "Page layout\nThe Page Layout setting allows you to customize the appearance of your page through different layout modes.\nThis setting is optional - if not specified, the page will use the default layout settings.\nThe Page Layout setting allows you to customize the appearance of your page through different layout modes.\nThis setting is optional - if not specified, the page will use the \ndefault\n layout settings.",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#default-layout",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 4,
    "headingTitle": "Default layout",
    "content": "Default layout\nIf no specific mode is given, the page will default to standard settings.\nThis means the page will display with the default table of contents (if headings are present) and other standard elements, providing a typical layout without any special adjustments.\nIf no specific mode is given, the \n[page](#)\npage\n will default to standard settings.\nThis means the page will display with the default table of contents (if headings are present) and other standard elements, providing a typical layout without any special adjustments.\n---\ntitle: My title\n---",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#wide-layout",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 4,
    "headingTitle": "Wide layout",
    "content": "Wide layout\nIn Wide Mode, you can hide the table of contents (ToC) on the right side of the page.\nThis is particularly useful if your page doesn't have any headings or if you prefer to utilize the extra horizontal space for other content.\nIn Wide Mode, you can hide the table of contents (ToC) on the right side of the page.\nThis is particularly useful if your page doesn't have any headings or if you prefer to utilize the extra horizontal space for other content.\n---\ntitle: My title\nlayout: wide\n---",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#center-layout",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 4,
    "headingTitle": "Center layout",
    "content": "Center layout\nCenter Mode removes the sidebar and the table of contents, and centers the page content.\nThis mode is great for changelogs or any page where you want to focus on the content.\nCenter Mode removes the sidebar and the table of contents, and centers the page content.\nThis mode is great for changelogs or any page where you want to focus on the content.\n---\ntitle: My title\nlayout: center\n---",
    "summary": ""
  },
  {
    "pageId": "writing-quickstart",
    "pageUrl": "/docs/guides/writing-quickstart#content",
    "pageTitle": "Writing Quickstart",
    "headingLevel": 2,
    "headingTitle": "Content",
    "content": "Content\nTo write a content for your page, you can use the MDX or Markdown syntax.\nYou can also leverage built in components,\nextensions\nand special symbols to enhance your content:\nTo write a content for your page, you can use the \n[MDX](https://mdxjs.com/)\nMDX\n or \n[Markdown](https://www.markdownguide.org/)\nMarkdown\n syntax.\nYou can also leverage built in \n[components](/docs/api/components)\ncomponents\n,\n\n[extensions](docs/guides/markdown-extensions)\nextensions\n\nand \n[special symbols](docs/guides/special-symbols)\nspecial symbols\n to enhance your content:\n# Quickstart\n\nThis is a quickstart guide for the `xyd` project.\n\n:::callout\nTip: You can use the React `<Callout>` component to render a callout too\n:::",
    "summary": ""
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols",
    "pageTitle": "Special Symbols",
    "headingLevel": 1,
    "headingTitle": "Special Symbols",
    "summary": "",
    "content": "Special Symbols\nLearn how to use special symbols to make your content more powerful\nLearn how to use special symbols to make your content more powerful\nLearn how to use special symbols to make your content more powerful\n<code>xyd</code> provides several special symbols that enhance your markdown content.\nLearn how to use them below.\n<code>\nxyd\n</code>\n provides several special symbols that enhance your markdown content.\nLearn how to use them below."
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols#component-directive",
    "pageTitle": "Special Symbols",
    "headingLevel": 2,
    "headingTitle": "Component Directive",
    "content": "Component Directive\nComponent Directive (:::<component>) is used to render UI components directly in your markdown:\nComponent Directive (\n:::<component>\n) is used to render UI \n[components](#)\ncomponents\n directly in your markdown:\n:::callout\nThis is a callout component\n:::\nTo pass props into component use {<key>=<value>}:\nTo pass props into component use \n{<key>=<value>}\n:\n:::callout{kind=\"warning\"}\nTake care!\n:::\n\n:::callout{kind=\"warning\" icon=\"⚠️\"}\nYou can pass multiple too!\n:::\nif component props accept booleans you can use sugar syntax:\nif component props accept booleans you can use sugar syntax:\n:::my-component{mybool}\nBool true sugar syntax\n:::\n\n// for negation\n:::my-component{!mybool}\nBool false sugar syntax\n:::\nSome components/built-in tags has special symbols as props, for example:\nSome components/built-in tags has special symbols as props, for example:\n:::my-component{#some-id}\n:::\nabove will pass id as prop for my-component. More details about this API you can find here.\nabove will pass \nid\n as prop for \nmy-component\n. More details about this API you can find \n[here](#)\nhere\n.",
    "summary": ""
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols#function-calling",
    "pageTitle": "Special Symbols",
    "headingLevel": 2,
    "headingTitle": "Function Calling",
    "content": "Function Calling\nFunction Calling (@<function>) is used to execute functions within your markdown content:\nFunction Calling (\n@<function>\n) is used to execute \n[functions](#)\nfunctions\n within your markdown content:\n@import \"~/snippets/Hello.ts\"",
    "summary": ""
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols#output-variable",
    "pageTitle": "Special Symbols",
    "headingLevel": 2,
    "headingTitle": "Output Variable",
    "content": "Output Variable\nOutput Variable (<<<<out_variable>{<attributes>}) is used to pass output variables from content files, useful for customizing documentation behavior:\nOutput Variable (\n<<<<out_variable>{<attributes>}\n) is used to pass \n[output variables](#)\noutput variables\n from content files, useful for customizing documentation behavior:\n<<<toc{anchor=\"bottom\"}\n:::toc-card{title=\"Starter\" href=\"https://github.com/xyd-js/starter\"}\n  Check out our starter repo\n:::\n<<<\n!$page.githubDemo{\n  title=\"Starter\",\n  description=\"Check out our starter repo\" \n  href=\"xyd-js/starter\"\n}\n\nclass MyTheme extends BaseTheme {\n  \n  @outputVar(\"toc\")\n  @defineOutputVar(\"page\", \"githubDemo\")\n  outputVarGithubDemo({title, description, href}) {\n    return <TocCard \n      title={title} \n      href={`httpss://github.com/${href}`} \n     icon={<IconGithub/>}\n    >\n      {description}\n    </TocCard>\n  }\n}",
    "summary": ""
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols#read-variable",
    "pageTitle": "Special Symbols",
    "headingLevel": 2,
    "headingTitle": "Read Variable",
    "content": "Read Variable\nRead Variable ({<read_variable>}) is used to access read variables from frontmatter and other pages:\nRead Variable (\n{<read_variable>}\n) is used to access \n[read variables](#)\nread variables\n from frontmatter and other \n[pages](#)\npages\n:\n{frontmatter.title}",
    "summary": ""
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols#attributes",
    "pageTitle": "Special Symbols",
    "headingLevel": 2,
    "headingTitle": "Attributes",
    "content": "Attributes\nSome built-in tags has abilities to pass attributes (<tag|expression>{<attributes>}):\nSome built-in tags has abilities to pass \n[attributes](#)\nattributes\n (\n<tag|expression>{<attributes>}\n):\n## Hide me from TOC {!toc}\n\n## Add me to TOC while not render on page {toc}\n\n## Component Directive (`:::`) {toc=\"Component Directive\"}",
    "summary": ""
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols#example",
    "pageTitle": "Special Symbols",
    "headingLevel": 3,
    "headingTitle": "Example",
    "content": "Example\nHere's how you can combine all these symbols in a single markdown file:\nHere's how you can combine all these symbols in a single markdown file:\n---\ntitle: Special symbols usage\n---\n\n!toc{anchor=\"bottom\"}\n:::toc-card{title=\"Starter\" href=\"https://github.com/xyd-js/starter\"}\n  Check out our starter repo\n:::\n\n# {frontmatter.title}\n\n## Import Example {toc=\"Import example\"}\nYou can import code snippets using the `@import` function:\n\n@import \"~/snippets/my-snippet.ts\"\n\n:::callout\n`~` refers to the local path of your docs.\n:::",
    "summary": ""
  },
  {
    "pageId": "special-symbols",
    "pageUrl": "/docs/guides/special-symbols#summary",
    "pageTitle": "Special Symbols",
    "headingLevel": 2,
    "headingTitle": "Summary",
    "content": "Summary\nThese special symbols provide powerful ways to enhance your markdown documentation:\nThese special symbols provide powerful ways to enhance your markdown documentation:\nComponents: Add rich UI elements directly in markdownFunctions: Import and execute code dynamicallyVariables: Pass data between content filesFrontmatter Access: Use metadata from your content files\n- Components: Add rich UI elements directly in markdown\nComponents: Add rich UI elements directly in markdown\nComponents\nComponents\n: Add rich UI elements directly in markdown\n- Functions: Import and execute code dynamically\nFunctions: Import and execute code dynamically\nFunctions\nFunctions\n: Import and execute code dynamically\n- Variables: Pass data between content files\nVariables: Pass data between content files\nVariables\nVariables\n: Pass data between content files\n- Frontmatter Access: Use metadata from your content files\nFrontmatter Access: Use metadata from your content files\nFrontmatter Access\nFrontmatter Access\n: Use metadata from your content files\nBy combining these features, you can create interactive and dynamic documentation with minimal effort.\nBy combining these features, you can create interactive and dynamic documentation with minimal effort.\nSome possibitlies from special symbols are availalbe in MDX due to it's nature, e.g importing files.The main difference between symbols and MDX is a simple, more markdown like\ngrammar and text-based hierarchy instead of component-like.\nSome possibitlies from special symbols are availalbe in MDX due to it's nature, e.g importing files.\nSome possibitlies from special symbols are availalbe in MDX due to it's nature, e.g importing files.\nThe main difference between symbols and MDX is a simple, more markdown like\ngrammar and text-based hierarchy instead of component-like.\nThe main difference between symbols and MDX is a simple, more markdown like\ngrammar and text-based hierarchy instead of component-like.",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 1,
    "headingTitle": "Markdown Extensions",
    "summary": "",
    "content": "Markdown Extensions\nLearn how to use built in Markdown extensions\nLearn how to use built in Markdown extensions\nLearn how to use built in Markdown extensions\n<code>xyd</code> provides many useful extensions to markdown language,\nfor example GFM (GitHub Flavored Markdown) or Markdown Directives.\n<code>\nxyd\n</code>\n provides many useful extensions to markdown language,\nfor example \n[GFM](https://github.github.com/gfm/)\nGFM\n (GitHub Flavored Markdown) or \n[Markdown Directives](https://github.com/remarkjs/remark-directive)\nMarkdown Directives\n.\nThe full list of default used extensions you can find here\nThe full list of default used extensions you can find here\nThe full list of default used extensions you can find \n[here](https://github.com/livesession/xyd/blob/master/packages/xyd-content/packages/md/plugins/index.ts)\nhere"
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#gfm",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 2,
    "headingTitle": "GFM",
    "content": "GFM\nYou can use GFM (GitHub Flavored Markdown) to write your content like this:\nYou can use GFM (GitHub Flavored Markdown) to write your content like this:\n# Heading\n \n## Heading\n \n### Heading\n \n#### Heading\n \nHello World, **Bold**, _Italic_, ~~Hidden~~\n \n1. First\n2. Second\n3. Third\n \n- Item 1\n- Item 2\n \n> Quote here\n \n![alt](/image.png)\n \n| Table | Description |\n| ----- | ----------- |\n| Hello | World       |",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#mdx",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 2,
    "headingTitle": "MDX",
    "content": "MDX\nMDX combines Markdown with JSX, letting you use React components in your docs.\nMDX combines Markdown with JSX, letting you use React components in your docs.",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#reusable-components",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 3,
    "headingTitle": "Reusable components",
    "content": "Reusable components\nCreating a reusable component:Hello, this is my reusable component <br/>Now, you can use it in your MDX files:import MyComponent from './my-component'\n\n<MyComponent />\n- Creating a reusable component:Hello, this is my reusable component <br/>\nCreating a reusable component:\nCreating a reusable component:\nHello, this is my reusable component\n <br/>\n- Now, you can use it in your MDX files:import MyComponent from './my-component'\n\n<MyComponent />\nNow, you can use it in your MDX files:\nNow, you can use it in your MDX files:\nimport MyComponent from './my-component'\n\n<MyComponent />",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#reusable-variables",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 3,
    "headingTitle": "Reusable variables",
    "content": "Reusable variables\nYou can also use MDX for reusable variables, by exporting data from your MDX files:export const title = 'Getting Starte';\n\nexport const data = { category: \"fantasy\" }; <br/>Now, you can use it in your MDX files:---\ntitle: My title\ndescription: My Description\n---\n\nimport { title, data } from './reusable-variables';\n\nHello, my title is {title} and I like {data.category}.\n- You can also use MDX for reusable variables, by exporting data from your MDX files:export const title = 'Getting Starte';\n\nexport const data = { category: \"fantasy\" }; <br/>\nYou can also use MDX for reusable variables, by exporting data from your MDX files:\nYou can also use MDX for reusable variables, by exporting data from your MDX files:\nexport const title = 'Getting Starte';\n\nexport const data = { category: \"fantasy\" };\n <br/>\n- Now, you can use it in your MDX files:---\ntitle: My title\ndescription: My Description\n---\n\nimport { title, data } from './reusable-variables';\n\nHello, my title is {title} and I like {data.category}.\nNow, you can use it in your MDX files:\nNow, you can use it in your MDX files:\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { title, data } from './reusable-variables';\n\nHello, my title is {title} and I like {data.category}.",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#exporting-component-variables",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 3,
    "headingTitle": "Exporting component variables",
    "content": "Exporting component variables\nYou can also add variables that can be filled in via props when you import the file:My favourite favurite book's category is {category} <br/>And then pass variables as props:import MyComponent from './component-variables'\n\n<MyComponent category=\"fantasy\" />\n- You can also add variables that can be filled in via props when you import the file:My favourite favurite book's category is {category} <br/>\nYou can also add variables that can be filled in via props when you import the file:\nYou can also add variables that can be filled in via props when you import the file:\nMy favourite favurite book's category is {category}\n <br/>\n- And then pass variables as props:import MyComponent from './component-variables'\n\n<MyComponent category=\"fantasy\" />\nAnd then pass variables as props:\nAnd then pass variables as props:\nimport MyComponent from './component-variables'\n\n<MyComponent category=\"fantasy\" />",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#headers-anchors",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 2,
    "headingTitle": "Headers Anchors",
    "content": "Headers Anchors\nHeaders(#) get automatically anchor links applied, anchors can also\nbe configured using the anchor option.\nHeaders(\n#\n) get automatically anchor links applied, anchors can also\nbe configured using the \nanchor\n option.\nIf you'd like to set a custom anchor,  add a suffix to the heading:\nIf you'd like to set a custom anchor,  add a suffix to the heading:\n# My custom anchors {#custom-anchors}\nThis sets the heading anchor to #custom-anchors instead of the default #my-custom-anchors.\nThis sets the heading anchor to \n#custom-anchors\n instead of the default \n#my-custom-anchors\n.",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#toc-anchors",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 2,
    "headingTitle": "TOC Anchors",
    "content": "TOC Anchors\nThe table of contents (TOC) will be generated based on headings, you can also customise the effects of headings:\nThe table of contents (TOC) will be generated based on headings, you can also customise the effects of headings:\n# Heading {!toc}\nThis heading will be hidden from TOC.\n\n# TOC Heading Only {toc}\nThis heading will **only** be visible in TOC, you can use it to add additional TOC items.\n\n# TOC Changed{toc=\"toc changed\"}\nIt display 'toc changed' in TOC section instead of 'TOC Changed'",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#component-directives",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 2,
    "headingTitle": "Component Directives",
    "content": "Component Directives\nUse markdown directives (:::) to render components in markdown syntax (instead of MDX), the full list of components you can find here.\nUse markdown directives (\n:::\n) to render components in markdown syntax (instead of MDX), the full list of components you can find \n[here](/docs/components)\nhere\n.\nFor example you would render some of <code>xyd</code> components like this:\nFor example you would render some of \n<code>\nxyd\n</code>\n components like this:\n:::callout\nYou can also use MDX version of the same [component](/docs/components).\n:::\nYou can also use MDX version of the same component.\nYou can also use MDX version of the same component.\nYou can also use MDX version of the same \n[component](/docs/components)\ncomponent\n.",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#tables",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 3,
    "headingTitle": "Tables",
    "content": "Tables\nYou can also use CSV-like version of declaring tables with some sugar-syntax:\nYou can also use CSV-like version of declaring tables with some sugar-syntax:\n:::table\n```\n[\n    [\"Syntax\", \"Description\", \"Markdown\"],\n    [\"Header\", \"Title\", \"`#`\"],\n    [\"Paragraph\", \"Text\", \"`*`\"]\n]\n```\n:::\nYou can still use GFM version of tables too.\nYou can still use GFM version of tables too.\nYou can still use \n[GFM](https://github.github.com/gfm/#tables-extension-)\nGFM\n version of tables too.",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#steps",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 3,
    "headingTitle": "Steps",
    "content": "Steps\nFor creating steps you can use such us syntax:\nFor creating steps you can use such us syntax:\n:::steps\n1. My First Steps\n\n2. My Second Step\n\n3. My Third Step\n    ```ts\n    console.log(\"You can also add code blocks in steps\")\n    ```\n:::",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#navigation",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 3,
    "headingTitle": "Navigation",
    "content": "Navigation\nFor creating tabbed navigation interfaces, you can use the following syntax:\nFor creating tabbed navigation interfaces, you can use the following syntax:\n:::nav\n1. [CLI](tab=cli)\n    Content for the CLI tab\n\n2. [Code](tab=code)\n    Content for the Code tab\n:::\nThis creates a navigation component with two tabs: \"CLI\" and \"Code\", each with its own content. The content for each tab follows the tab definition.\nThis creates a navigation component with two tabs: \"CLI\" and \"Code\", each with its own content. The content for each tab follows the tab definition.\nExplore samples with component directives\nExplore samples with component directives\nExplore samples with component directives",
    "summary": ""
  },
  {
    "pageId": "markdown-extensions",
    "pageUrl": "/docs/guides/markdown-extensions#emojis-",
    "pageTitle": "Markdown Extensions",
    "headingLevel": 2,
    "headingTitle": "Emojis 🎉",
    "content": "Emojis 🎉\nFor declaring just copy and paste the emoji you want to use in your markdown, for example:\nFor declaring just copy and paste the emoji you want to use in your markdown, for example:\n🔥",
    "summary": ""
  },
  {
    "pageId": "developer-content",
    "pageUrl": "/docs/guides/developer-content",
    "pageTitle": "Developer Content",
    "headingLevel": 1,
    "headingTitle": "Developer Content",
    "summary": "",
    "content": "Developer Content\nLearn how to write content for developers\nLearn how to write content for developers\nLearn how to write content for developers\nIn this guide, you'll learn how to write content for developers, like code snippets, examples, and more.\nIn this guide, you'll learn how to write content for developers, like code snippets, examples, and more."
  },
  {
    "pageId": "developer-content",
    "pageUrl": "/docs/guides/developer-content#code-blocks",
    "pageTitle": "Developer Content",
    "headingLevel": 2,
    "headingTitle": "Code Blocks",
    "content": "Code Blocks\nYou can use standard markdown code blocks (```) to write code blocks.\nSyntax highlighting is automatically applied based on the language of the code.\nYou can use standard markdown code blocks (```) to write code blocks.\nSyntax highlighting is automatically applied based on the language of the code.\nInput:\nInput:\nInput:\n```tsx\nconst MyComponent = () => {\n  return <div>Hello, world!</div>\n}\n```\nOutput:\nOutput:\nOutput:\nconst MyComponent = () => {\n  return <div>Hello, world!</div>\n}\nYou can also customize syntax highlighting. Please see here for more details.\nYou can also customize syntax highlighting. Please see here for more details.\nYou can also customize syntax highlighting. Please see \n[here](/docs/developer-content#syntax-highlighting)\nhere\n for more details.",
    "summary": ""
  },
  {
    "pageId": "developer-content",
    "pageUrl": "/docs/guides/developer-content#line-highlighting",
    "pageTitle": "Developer Content",
    "headingLevel": 2,
    "headingTitle": "Line Highlighting",
    "content": "Line Highlighting\nInput:\nInput:\nInput:\n```tsx{2}\nconst MyComponent = () => {\n  return <div>Hello, world!</div>\n}\n```\nOutput:\nOutput:\nOutput:\nconst MyComponent = () => {\n  return <div>Hello, world!</div>\n}\nYou can also specify multiple single lines or ranges:\nYou can also specify multiple single lines or ranges:\nMultiple single lines: {1,3,5}Line ranges: {2-4}, {6-8}, {11-13}Line ranges + single lines: {1,6-8,11}All together: {1,3-5}\n- Multiple single lines: {1,3,5}\nMultiple single lines: {1,3,5}\nMultiple single lines: \n{1,3,5}\n- Line ranges: {2-4}, {6-8}, {11-13}\nLine ranges: {2-4}, {6-8}, {11-13}\nLine ranges: \n{2-4}, {6-8}, {11-13}\n- Line ranges + single lines: {1,6-8,11}\nLine ranges + single lines: {1,6-8,11}\nLine ranges + single lines: \n{1,6-8,11}\n- All together: {1,3-5}\nAll together: {1,3-5}\nAll together: \n{1,3-5}\nInput:\nInput:\nInput:\n```tsx{1,3-5}\nconst MyComponent = () => {\n  return <div>\n    <>\n        Hello, world!\n    </>\n  </div>\n}\n```\nOutput:\nOutput:\nOutput:\nconst MyComponent = () => {\n  return <div>\n    <>\n        Hello, world!\n    </>\n  </div>\n}",
    "summary": ""
  },
  {
    "pageId": "developer-content",
    "pageUrl": "/docs/guides/developer-content#code-diff",
    "pageTitle": "Developer Content",
    "headingLevel": 2,
    "headingTitle": "Code diff",
    "content": "Code diff\nInput:\nInput:\nInput:\n```tsx\nconst MyComponent = () => {\n  // !diff -\n  return <div>Hello, world!</div>\n  // !diff +\n  return <div>Hello, new world!</div>\n}\n```\nOutput:\nOutput:\nOutput:\nconst MyComponent = () => {\n  // !diff -\n  return <div>Hello, world!</div>\n  // !diff +\n  return <div>Hello, new world!</div>\n}",
    "summary": ""
  },
  {
    "pageId": "developer-content",
    "pageUrl": "/docs/guides/developer-content#code-groups",
    "pageTitle": "Developer Content",
    "headingLevel": 2,
    "headingTitle": "Code Groups",
    "content": "Code Groups\nYou can use the code-group component to group multiple code blocks together.\nYou can use the \ncode-group\n component to group multiple code blocks together.\nInput:\nInput:\nInput:\n:::code-group{title=\"xyd installation\"}\n```bash npm\nnpm i -g xyd-js\n```\n\n```bash yarn\nyarn global add xyd-js\n```\n\n```bash pnpm\npnpm add -g xyd-js\n```\n:::\nOutput:\nOutput:\nOutput:",
    "summary": ""
  },
  {
    "pageId": "developer-content",
    "pageUrl": "/docs/guides/developer-content#import-code",
    "pageTitle": "Developer Content",
    "headingLevel": 2,
    "headingTitle": "Import Code",
    "content": "Import Code\nYou can import code from a file using the @importCode function:\nYou can import code from a file using the \n@importCode\n \n[function](/docs/api/functions#importCode)\nfunction\n:\n@importCode \"./relative-to-current-file.tsx\"",
    "summary": ""
  },
  {
    "pageId": "customization-introduction",
    "pageUrl": "/docs/guides/customization-introduction",
    "pageTitle": "Customization Introduction",
    "headingLevel": 1,
    "headingTitle": "Customization Introduction",
    "summary": "",
    "content": "Customization Introduction\nLearn the fundamentals of documentation customization\nLearn the fundamentals of documentation customization\nLearn the fundamentals of documentation customization\nCustomizing your documentation allows you to create a unique and branded experience for your users.\nThere are three main approaches for customization:\nCustomizing your documentation allows you to create a unique and branded experience for your users.\nThere are three main approaches for customization:\nCustomization via settings file - choose from a variety of pre-built themes\nand tweak using available theme settingsExtending the default theme - build upon the existing design while adding your own enhancements via codeCreating a new theme - develop a completely new theme from scratch via code\n- Customization via settings file - choose from a variety of pre-built themes\nand tweak using available theme settings\nCustomization via settings file - choose from a variety of pre-built themes\nand tweak using available theme settings\nCustomization via settings file - choose from a variety of \n[pre-built themes](/docs/guides/themes)\npre-built themes\n\nand tweak using available \n[theme settings](/docs/guides/theme-settings)\ntheme settings\n- Extending the default theme - build upon the existing design while adding your own enhancements via code\nExtending the default theme - build upon the existing design while adding your own enhancements via code\nExtending the default theme - build upon the existing design while adding your own enhancements via code\n- Creating a new theme - develop a completely new theme from scratch via code\nCreating a new theme - develop a completely new theme from scratch via code\nCreating a new theme - develop a completely new theme from scratch via code"
  },
  {
    "pageId": "customization-introduction",
    "pageUrl": "/docs/guides/customization-introduction#customization-via-settings-file",
    "pageTitle": "Customization Introduction",
    "headingLevel": 2,
    "headingTitle": "Customization via Settings file",
    "content": "Customization via Settings file\nThis is the simplest way to customize your documentation.\nYou can do this by editing the xyd.json file in the root of your project.\nThis is the simplest way to customize your documentation.\nYou can do this by editing the \nxyd.json\n file in the root of your project.\n{\n    \"theme\": {\n        \"name\": \"poetry\",\n        \"logo\": \"/path/to/logo.svg\",\n        \"favicon\": \"/path/to/favicon.svg\",\n        // ... other theme settings\n    }\n}\nFor more details on the theme settings, see the Theme Settings guide.\nFor more details on the theme settings, see the \n[Theme Settings](/docs/guides/theme-settings)\nTheme Settings\n guide.",
    "summary": ""
  },
  {
    "pageId": "customization-introduction",
    "pageUrl": "/docs/guides/customization-introduction#customization-via-code",
    "pageTitle": "Customization Introduction",
    "headingLevel": 2,
    "headingTitle": "Customization via Code",
    "content": "Customization via Code\nTo customize your documentation via code, you'll need to work with a .xyd/theme directory inside your project root:\nTo customize your documentation via code, you'll need to work with a \n.xyd/theme\n directory inside your project root:\n.\n├─ docs                # project root\n│  ├─ .xyd\n│  │  └─ theme\n│  │     ├─ index.ts   # theme entry\n│  │     └─ index.css  # theme styles entry\n│  │  \n│  └─ index.md\n└─ xyd.json            # settings file\n<code>xyd</code> will lookup for index.ts if you want to modify or create new theme behavior.\nThis file is only necessary when you need to extend default theme's functionality or create a new theme:\n<code>\nxyd\n</code>\n will lookup for \nindex.ts\n if you want to modify or create new theme behavior.\nThis file is only necessary when you need to extend default theme's functionality or create a new theme:\nimport {BaseTheme, type Theme} from \"xyd-js/themes\"\n\nexport default class MyTheme extends BaseTheme {\n    constructor(theme: Theme) {\n        super();\n\n        // you can access theme settings here\n    }\n}\nHowever, if you only want to customize styles, you can simply use index.css without creating an index.ts file.\nHowever, if you only want to customize styles, you can simply use \nindex.css\n without creating an \nindex.ts\n file.\nLearn more about extending the default theme\nor creating a custom theme via code.\nLearn more about extending the default theme\nor creating a custom theme via code.\nLearn more about \n[extending the default theme](/docs/guides/extending-default-theme)\nextending the default theme\n\nor \n[creating a custom theme](/docs/guides/custom-theme)\ncreating a custom theme\n via code.",
    "summary": ""
  },
  {
    "pageId": "customization-introduction",
    "pageUrl": "/docs/guides/customization-introduction#theme-interface",
    "pageTitle": "Customization Introduction",
    "headingLevel": 2,
    "headingTitle": "Theme Interface",
    "content": "Theme Interface\nTheme settings are defined as an object with the following interface:\nTheme settings are defined as an object with the following interface:\n@importCode \"../../../../packages/xyd-core/src/types/settings.ts#Theme\"\n@importCode \"../../../../packages/xyd-core/src/types/settings.ts#Theme\"\nFull source you can find here\nFull source you can find \n[here](https://github.com/livesession/xyd/blob/master/packages/xyd-core/src/types/settings.ts)\nhere",
    "summary": ""
  },
  {
    "pageId": "extending-the-default-theme",
    "pageUrl": "/docs/guides/extending-default-theme",
    "pageTitle": "Extending the Default Theme",
    "headingLevel": 1,
    "headingTitle": "Extending the Default Theme",
    "summary": "",
    "content": "Extending the Default Theme\nLearn how to extend the default theme to match your brand.\nLearn how to extend the default theme to match your brand.\nLearn how to extend the default theme to match your brand.\nWhile theme settings provide a quick way to customize your documentation,\nextending the default theme gives you more flexibility and control.\nWhile \n[theme settings](/docs/guides/theme-settings)\ntheme settings\n provide a quick way to customize your documentation,\nextending the default theme gives you more flexibility and control.\nThis approach allows you to build upon the existing design while adding your own customizations, all while maintaining the core functionality of the default theme.\nThis approach allows you to build upon the existing design while adding your own customizations, all while maintaining the core functionality of the default theme.\nAll built-in themes like poetry or gusto are based on the default theme.\nAll built-in themes like poetry or gusto are based on the default theme.\nAll built-in themes like \n[poetry](#)\npoetry\n or \n[gusto](#)\ngusto\n are based on the default theme."
  },
  {
    "pageId": "extending-the-default-theme",
    "pageUrl": "/docs/guides/extending-default-theme#getting-started",
    "pageTitle": "Extending the Default Theme",
    "headingLevel": 2,
    "headingTitle": "Getting Started",
    "content": "Getting Started\nTo extend the default theme, create a .xyd/theme directory in your project root and add an index.ts file:\nTo extend the default theme, create a \n.xyd/theme\n directory in your project root and add an \nindex.ts\n file:\nimport {BaseTheme, type Theme} from \"xyd-js/themes\"\n\nexport default class MyTheme extends BaseTheme {\n    constructor(theme: Theme) {\n        super(theme);\n        \n        // Access theme settings\n        const {logo, favicon} = theme;\n        \n        // Add your customizations here\n    }\n}\nFull source code of the default theme you can find\nhere.\nFull source code of the default theme you can find\n\n[here](https://github.com/livesession/xyd/blob/master/packages/xyd-themes/src/BaseTheme.tsx)\nhere\n.",
    "summary": ""
  },
  {
    "pageId": "extending-the-default-theme",
    "pageUrl": "/docs/guides/extending-default-theme#overriding-theme-settings",
    "pageTitle": "Extending the Default Theme",
    "headingLevel": 2,
    "headingTitle": "Overriding Theme Settings",
    "content": "Overriding Theme Settings\nYou can override default theme settings by extending the theme configuration in your xyd.json:\nYou can override default theme settings by extending the theme configuration in your \nxyd.json\n:\n{\n    \"theme\": {\n        \"name\": \"poetry\",\n        \"markdown\": {\n            \"syntaxHighlight\": \"material-ocean\",\n            // ... other markdown settings\n        },\n        // ... other theme settings\n    }\n}\nThen in your theme class, you can modify these settings:\nThen in your theme class, you can modify these settings:\nexport default class MyTheme extends BaseTheme {\n    constructor(theme: Theme) {\n        super(theme);\n        \n        theme.markdown.syntaxHighlight = \"github-dark\";\n    }\n}",
    "summary": ""
  },
  {
    "pageId": "extending-the-default-theme",
    "pageUrl": "/docs/guides/extending-default-theme#style-customization",
    "pageTitle": "Extending the Default Theme",
    "headingLevel": 3,
    "headingTitle": "Style Customization",
    "content": "Style Customization\nCreate an index.css file in your .xyd/theme directory to add custom styles:\nCreate an \nindex.css\n file in your \n.xyd/theme\n directory to add custom styles:\n/* Custom styles for your extended theme */\n.custom-layout {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem;\n}\n\n.custom-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 1rem 0;\n}\nFor more advanced customization needs, consider creating a custom theme from scratch.\nFor more advanced customization needs, consider creating a custom theme from scratch.\nFor more advanced customization needs, consider \n[creating a custom theme](/docs/guides/custom-theme)\ncreating a custom theme\n from scratch.",
    "summary": ""
  },
  {
    "pageId": "extending-the-default-theme",
    "pageUrl": "/docs/guides/extending-default-theme#adding-a-custom-component",
    "pageTitle": "Extending the Default Theme",
    "headingLevel": 2,
    "headingTitle": "Adding a Custom Component",
    "content": "Adding a Custom Component\nHere's an example of how to add a custom component to your extended theme:\nHere's an example of how to add a custom component to your extended theme:\nexport default class MyTheme extends BaseTheme {\n    constructor(theme: Theme) {\n        super(theme);\n        \n        // Register custom component\n        this.registerComponent(CustomBanner, 'custom-banner');\n    }\n}\n\nfunction CustomBanner({text, children}: {text: string, children: React.ReactNode}): string {\n    return <div class=\"custom-banner\">\n        <p>{text}</p>\n        {children}\n    </div>\n}\nYou can then use this component in your markdown:\nYou can then use this component in your markdown:\n:::custom-banner{text=\"Welcome to our documentation!\"}\nI'm a child\n:::\nor you can use a MDX syntax too:\nor you can use a MDX syntax too:\n<CustomBanner text=\"Welcome to our documentation!\">\n    <>I'm a child</>\n</CustomBanner>\nIf you not set name in registerComponent function, it will\nconvert PascalCase to kebab-case for markdown syntax.\nIf you not set name in registerComponent function, it will\nconvert PascalCase to kebab-case for markdown syntax.\nIf you not set \nname\n in \n[registerComponent](#)\nregisterComponent\n function, it will\nconvert PascalCase to kebab-case for markdown syntax.",
    "summary": ""
  },
  {
    "pageId": "todo",
    "pageUrl": "/docs/guides/custom-theme",
    "pageTitle": "TODO",
    "headingLevel": 1,
    "headingTitle": "TODO",
    "summary": "",
    "content": "TODO"
  },
  {
    "pageId": "sdk-quickstart",
    "pageUrl": "/docs/guides/sdk-quickstart",
    "pageTitle": "SDK quickstart",
    "headingLevel": 1,
    "headingTitle": "SDK quickstart",
    "summary": "",
    "content": "SDK quickstart"
  },
  {
    "pageId": "opensdk",
    "pageUrl": "/docs/guides/opensdk",
    "pageTitle": "OpenSDK",
    "headingLevel": 1,
    "headingTitle": "OpenSDK",
    "summary": "",
    "content": "OpenSDK"
  },
  {
    "pageId": "roadmap",
    "pageUrl": "/docs/development/roadmap",
    "pageTitle": "Roadmap",
    "headingLevel": 1,
    "headingTitle": "Roadmap",
    "summary": "",
    "content": "Roadmap\nOur plans for evolving xyd.\nOur plans for evolving xyd.\nOur plans for evolving xyd.\nLast updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\nLast updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\nLast updated: \n{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\nThis roadmap outlines the key features and improvements we're working on for xyd. While we have a clear vision,\nour plans may evolve as we gather feedback and insights from the community.\nFor recent updates, check out our changelog.\nThis roadmap outlines the key features and improvements we're working on for xyd. While we have a clear vision,\nour plans may evolve as we gather feedback and insights from the community.\nFor recent updates, check out our \nchangelog\n[changelog](/docs/development/changelog)\nchangelog\n.\nThese plans represent our current vision and priorities. We're committed to building the best documentation tool possible,\nbut specific features and timelines may adjust based on community needs and technical considerations.\nThese plans represent our current vision and priorities. We're committed to building the best documentation tool possible,\nbut specific features and timelines may adjust based on community needs and technical considerations.\nThese plans represent our current vision and priorities. We're committed to building the best documentation tool possible,\nbut specific features and timelines may adjust based on community needs and technical considerations.\nWe believe in building xyd together with our community.\nFeel free to join the discussion and share your thoughts on any of these features.\nWe believe in building xyd together with our community.\nFeel free to join the \n[discussion](https://github.com/livesession/xyd/discussions)\ndiscussion\n and share your thoughts on any of these features."
  },
  {
    "pageId": "roadmap",
    "pageUrl": "/docs/development/roadmap#compose",
    "pageTitle": "Roadmap",
    "headingLevel": 2,
    "headingTitle": "Compose",
    "content": "Compose\nComposable architecture for writing docs content.\nComposable architecture for writing docs content.\nCompose API: Mechanism for creating and enhancing docs content using declarative or programmatic approachesInteractive Widgets: Built-in support for creating interactive documentation elements\n- Compose API: Mechanism for creating and enhancing docs content using declarative or programmatic approaches\nCompose API: Mechanism for creating and enhancing docs content using declarative or programmatic approaches\nCompose API\nCompose API\n: Mechanism for creating and enhancing docs content using declarative or programmatic approaches\n- Interactive Widgets: Built-in support for creating interactive documentation elements\nInteractive Widgets: Built-in support for creating interactive documentation elements\nInteractive Widgets\nInteractive Widgets\n: Built-in support for creating interactive documentation elements",
    "summary": ""
  },
  {
    "pageId": "roadmap",
    "pageUrl": "/docs/development/roadmap#api-toolchain",
    "pageTitle": "Roadmap",
    "headingLevel": 2,
    "headingTitle": "API Toolchain",
    "content": "API Toolchain\nSet of tools to help build API-based docs.\nSet of tools to help build API-based docs.\nAPI Generation: Generate API docs from source codeSDK Generation: Generate SDKs for different languages from the API reference\n- API Generation: Generate API docs from source code\nAPI Generation: Generate API docs from source code\nAPI Generation\nAPI Generation\n: Generate API docs from source code\n- SDK Generation: Generate SDKs for different languages from the API reference\nSDK Generation: Generate SDKs for different languages from the API reference\nSDK Generation\nSDK Generation\n: Generate SDKs for different languages from the API reference",
    "summary": ""
  },
  {
    "pageId": "roadmap",
    "pageUrl": "/docs/development/roadmap#themes--plugins",
    "pageTitle": "Roadmap",
    "headingLevel": 2,
    "headingTitle": "Themes & Plugins",
    "content": "Themes & Plugins\nEnhanced docs by adding themes and plugins.\nEnhanced docs by adding themes and plugins.\nPlugin API: Customizable plugins API to enhance documentationMarketplace: Curated collection of themes and plugins with easy installation and updates\n- Plugin API: Customizable plugins API to enhance documentation\nPlugin API: Customizable plugins API to enhance documentation\nPlugin API\nPlugin API\n: Customizable plugins API to enhance documentation\n- Marketplace: Curated collection of themes and plugins with easy installation and updates\nMarketplace: Curated collection of themes and plugins with easy installation and updates\nMarketplace\nMarketplace\n: Curated collection of themes and plugins with easy installation and updates",
    "summary": ""
  },
  {
    "pageId": "roadmap",
    "pageUrl": "/docs/development/roadmap#desktopbrowser-app",
    "pageTitle": "Roadmap",
    "headingLevel": 2,
    "headingTitle": "Desktop/Browser app",
    "content": "Desktop/Browser app\nWrite docs on the desktop or browser.\nWrite docs on the desktop or browser.\nLocal Development: Full-featured local development environment with offline support in multi-environment\n- Local Development: Full-featured local development environment with offline support in multi-environment\nLocal Development: Full-featured local development environment with offline support in multi-environment\nLocal Development\nLocal Development\n: Full-featured local development environment with offline support in multi-environment",
    "summary": ""
  },
  {
    "pageId": "roadmap",
    "pageUrl": "/docs/development/roadmap#get-involved",
    "pageTitle": "Roadmap",
    "headingLevel": 2,
    "headingTitle": "Get Involved",
    "content": "Get Involved\nWe welcome your contributions to xyd's future! Join our GitHub Discussions to share ideas, provide feedback, or participate in the development process.\nWe welcome your contributions to xyd's future! Join our \n[GitHub Discussions](https://github.com/livesession/xyd/discussions)\nGitHub Discussions\n to share ideas, provide feedback, or participate in the development process.\nHave a feature request or want to contribute? Check out our contribution guidelines to get started.\nHave a feature request or want to contribute? Check out our contribution guidelines to get started.\nHave a feature request or want to contribute? Check out our \n[contribution guidelines](https://github.com/livesession/xyd/blob/main/CONTRIBUTING.md)\ncontribution guidelines\n to get started.",
    "summary": ""
  },
  {
    "pageId": "contributing",
    "pageUrl": "/docs/development/contributing",
    "pageTitle": "Contributing",
    "headingLevel": 1,
    "headingTitle": "Contributing",
    "summary": "",
    "content": "Contributing\nHow to participate in xyd development\nHow to participate in xyd development\nHow to participate in xyd development\nWe welcome contributions from the community!Please review our contributing guidelines for details on how to submit changes.\nWe welcome contributions from the community!\nPlease review our \n[contributing guidelines](https://github.com/livesession/xyd/blob/main/CONTRIBUTING.md)\ncontributing guidelines\n for details on how to submit changes.\nFor questions and discussions, please use GitHub Discussions.\nFor questions and discussions, please use \n[GitHub Discussions](https://github.com/livesession/xyd/discussions)\nGitHub Discussions\n."
  },
  {
    "pageId": "changelog",
    "pageUrl": "/docs/development/changelog",
    "pageTitle": "Changelog",
    "headingLevel": 1,
    "headingTitle": "Changelog",
    "summary": "",
    "content": "Changelog\nThe latest updates and improvements to xyd\nThe latest updates and improvements to xyd\nThe latest updates and improvements to xyd\n<Update label=\"2025-04-10\" description=\"Java SDK 0.9.0 released\">\n  * example\n  * change\n</Update>"
  }
]