[
  {
    "title": "Interface Settings",
    "canonical": "@xyd-js/sources/interfaces/Settings",
    "description": "Main settings interface for the application\n",
    "context": {
      "symbolId": "1",
      "symbolName": "Settings",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 8,
      "col": 17,
      "signatureText": {
        "code": "export interface Settings {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Settings {\n    /** Theme configuration for the application */\n    theme?: Theme\n\n    /** Navigation configuration */\n    navigation?: Navigation\n\n    /** API configuration */\n    api?: API\n\n    /** Integrations configuration */\n    integrations?: Integrations\n\n    /** Plugins configuration */\n    plugins?: Plugins\n\n    /**\n     * @unsafe\n     *\n     * Redirects configuration\n     */\n    redirects?: Redirects[]\n\n    /**\n     * @unsafe\n     * SEO configuration\n     */\n    seo?: SEO\n\n    /** Engine configuration */\n    engine?: Engine\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "theme",
            "type": "Theme",
            "description": "Theme configuration for the application\n",
            "symbolDef": {
              "id": "10"
            },
            "meta": []
          },
          {
            "name": "navigation",
            "type": "Navigation",
            "description": "Navigation configuration\n",
            "symbolDef": {
              "id": "37"
            },
            "meta": []
          },
          {
            "name": "api",
            "type": "API",
            "description": "API configuration\n",
            "symbolDef": {
              "id": "71"
            },
            "meta": []
          },
          {
            "name": "integrations",
            "type": "Integrations",
            "description": "Integrations configuration\n",
            "symbolDef": {
              "id": "99"
            },
            "meta": []
          },
          {
            "name": "plugins",
            "type": "Plugins",
            "description": "Plugins configuration\n",
            "symbolDef": {
              "id": "116"
            },
            "meta": []
          },
          {
            "name": "redirects",
            "type": "$$array",
            "description": "",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "Redirects",
              "properties": [],
              "symbolDef": {
                "id": "120"
              }
            },
            "meta": []
          },
          {
            "name": "seo",
            "type": "SEO",
            "description": "",
            "symbolDef": {
              "id": "123"
            },
            "meta": []
          },
          {
            "name": "engine",
            "type": "Engine",
            "description": "Engine configuration\n",
            "symbolDef": {
              "id": "129"
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Theme",
    "canonical": "@xyd-js/sources/interfaces/Theme",
    "description": "Theme configuration that changes the look and feel of the project\n",
    "context": {
      "symbolId": "10",
      "symbolName": "Theme",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 46,
      "col": 17,
      "signatureText": {
        "code": "export interface Theme {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Theme {\n    /**\n     * A preset theme configuration that changes the look and feel of the project.\n     * A theme is a set of default styling configurations.\n     *\n     * Example built-in themes: `cosmo`, `gusto`, `poetry`, `picasso`\n     */\n    readonly name: ThemePresetName | (string & {})\n\n    /** Markdown configuration for the theme, including options like syntax highlighting */\n    markdown?: Markdown\n\n    /**\n     * Path to logo image or object with path to \"light\" and \"dark\" mode logo images, and where the logo links to.\n     * SVG format is recommended as it does not pixelate and the file size is generally smaller.\n     */\n    logo?: string | Logo | React.JSX.Element\n\n    /**\n     * Banner configuration for the theme.\n     */\n    banner?: Banner\n\n    /** Path to the favicon image. For example: /path/to/favicon.svg */\n    favicon?: string;\n\n    /** The defult level of the table of contents. */\n    maxTocDepth?: number\n\n    /** Head configuration */\n    head?: HeadConfig[]\n\n    /** The iconify library */\n    icons?: Icons\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "name",
            "type": "ThemePresetName | string",
            "description": "A preset theme configuration that changes the look and feel of the project.\nA theme is a set of default styling configurations.\n\nExample built-in themes: \n`cosmo`\n, \n`gusto`\n, \n`poetry`\n, \n`picasso`\n",
            "symbolDef": {
              "id": [
                "35"
              ]
            },
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "markdown",
            "type": "Markdown",
            "description": "Markdown configuration for the theme, including options like syntax highlighting\n",
            "symbolDef": {
              "id": "20"
            },
            "meta": []
          },
          {
            "name": "logo",
            "type": "string | Logo | React.JSX.Element",
            "description": "Path to logo image or object with path to \"light\" and \"dark\" mode logo images, and where the logo links to.\nSVG format is recommended as it does not pixelate and the file size is generally smaller.\n",
            "symbolDef": {
              "id": [
                "22"
              ]
            },
            "meta": []
          },
          {
            "name": "banner",
            "type": "Banner",
            "description": "Banner configuration for the theme.\n",
            "symbolDef": {
              "id": "26"
            },
            "meta": []
          },
          {
            "name": "favicon",
            "type": "string",
            "description": "Path to the favicon image. For example: /path/to/favicon.svg\n",
            "meta": []
          },
          {
            "name": "maxTocDepth",
            "type": "number",
            "description": "The defult level of the table of contents.\n",
            "meta": []
          },
          {
            "name": "head",
            "type": "$$array",
            "description": "Head configuration\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "[string, Record<string, string | boolean>]",
              "properties": []
            },
            "meta": []
          },
          {
            "name": "icons",
            "type": "Icons",
            "description": "The iconify library\n",
            "symbolDef": {
              "id": "33"
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Markdown",
    "canonical": "@xyd-js/sources/interfaces/Markdown",
    "description": "Markdown configuration interface\n",
    "context": {
      "symbolId": "20",
      "symbolName": "Markdown",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 95,
      "col": 17,
      "signatureText": {
        "code": "export interface Markdown {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Markdown {\n    /** Syntax highlighting configuration */\n    syntaxHighlight?: SyntaxHighlight\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "syntaxHighlight",
            "type": "Theme",
            "description": "Syntax highlighting configuration\n",
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Logo",
    "canonical": "@xyd-js/sources/interfaces/Logo",
    "description": "Logo configuration interface\n",
    "context": {
      "symbolId": "22",
      "symbolName": "Logo",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 103,
      "col": 17,
      "signatureText": {
        "code": "export interface Logo {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Logo {\n    /** Path to the logo in light mode. For example: `/path/to/logo.svg` */\n    light?: string;\n\n    /** Path to the logo in dark mode. For example: `/path/to/logo.svg` */\n    dark?: string;\n\n    /** Where clicking on the logo links you to */\n    href?: string;\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "light",
            "type": "string",
            "description": "Path to the logo in light mode. For example: \n`/path/to/logo.svg`\n",
            "meta": []
          },
          {
            "name": "dark",
            "type": "string",
            "description": "Path to the logo in dark mode. For example: \n`/path/to/logo.svg`\n",
            "meta": []
          },
          {
            "name": "href",
            "type": "string",
            "description": "Where clicking on the logo links you to\n",
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Banner",
    "canonical": "@xyd-js/sources/interfaces/Banner",
    "description": "Banner configuration interface\n",
    "context": {
      "symbolId": "26",
      "symbolName": "Banner",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 117,
      "col": 17,
      "signatureText": {
        "code": "export interface Banner {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Banner {\n    /**\n     * Banner content.\n     */\n    content: string | React.JSX.Element\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "content",
            "type": "string | React.JSX.Element",
            "description": "Banner content.\n",
            "symbolDef": {
              "id": []
            },
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Interface IconLibrary",
    "canonical": "@xyd-js/sources/interfaces/IconLibrary",
    "description": "",
    "context": {
      "symbolId": "28",
      "symbolName": "IconLibrary",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 124,
      "col": 17,
      "signatureText": {
        "code": "export interface IconLibrary {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface IconLibrary {\n    /** The iconify library name */\n    name: string\n\n    /** The iconify library version */\n    version?: string\n\n    /** The default iconify icon name */\n    default?: boolean\n\n    /** Merge icons from the library into the default iconify library */\n    noprefix?: boolean\n}",
        "lang": "ts"
      },
      "meta": []
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "The iconify library name\n",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "version",
            "type": "string",
            "description": "The iconify library version\n",
            "meta": []
          },
          {
            "name": "default",
            "type": "boolean",
            "description": "The default iconify icon name\n",
            "meta": []
          },
          {
            "name": "noprefix",
            "type": "boolean",
            "description": "Merge icons from the library into the default iconify library\n",
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Icons",
    "canonical": "@xyd-js/sources/interfaces/Icons",
    "description": "",
    "context": {
      "symbolId": "33",
      "symbolName": "Icons",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 138,
      "col": 17,
      "signatureText": {
        "code": "export interface Icons {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Icons {\n    /** The iconify library */\n    library?: string | string[] | IconLibrary | IconLibrary[]\n}",
        "lang": "ts"
      },
      "meta": []
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "library",
            "type": "string | IconLibrary | string[] | IconLibrary[]",
            "description": "The iconify library\n",
            "symbolDef": {
              "id": [
                "28"
              ]
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Type ThemePresetName",
    "canonical": "@xyd-js/sources/types/ThemePresetName",
    "description": "Available theme preset names\n",
    "context": {
      "symbolId": "35",
      "symbolName": "ThemePresetName",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 144,
      "col": 12,
      "signatureText": {
        "code": "export type ThemePresetName = \"poetry\" | \"cosmo\" | \"opener\";",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type ThemePresetName = \"poetry\" | \"cosmo\" | \"opener\"",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "\"poetry\" | \"cosmo\" | \"opener\"",
          "description": "Available theme preset names\n",
          "symbolDef": {
            "id": []
          },
          "meta": []
        }
      }
    ]
  },
  {
    "title": "Type SearchType",
    "canonical": "@xyd-js/sources/types/SearchType",
    "description": "Search bar location options\n",
    "context": {
      "symbolId": "36",
      "symbolName": "SearchType",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 147,
      "col": 12,
      "signatureText": {
        "code": "export type SearchType = \"side\" | \"top\";",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type SearchType = \"side\" | \"top\"",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "\"side\" | \"top\"",
          "description": "Search bar location options\n",
          "symbolDef": {
            "id": []
          },
          "meta": []
        }
      }
    ]
  },
  {
    "title": "Interface Navigation",
    "canonical": "@xyd-js/sources/interfaces/Navigation",
    "description": "Navigation configuration interface\n",
    "context": {
      "symbolId": "37",
      "symbolName": "Navigation",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 156,
      "col": 17,
      "signatureText": {
        "code": "export interface Navigation {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Navigation {\n    /** Definition of sidebar - an array of groups with all the pages within that group */\n    sidebar: (SidebarRoute | Sidebar)[]\n\n    /** Array of headers */\n    header?: Header[]\n\n    /** Array of sub headers */\n    subheader?: SubHeader[]\n\n    /**\n     * Array of version names. Only use this if you want to show different versions of docs\n     * with a dropdown in the navigation bar.\n     */\n    // versions?: string[]\n\n    /** Anchors, includes the icon, name, and url */\n    anchors?: AnchorRoot\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "sidebar",
            "type": "$$array",
            "description": "Definition of sidebar - an array of groups with all the pages within that group\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "SidebarRoute | Sidebar",
              "properties": [],
              "symbolDef": {
                "id": [
                  "42",
                  "45"
                ]
              }
            },
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "header",
            "type": "$$array",
            "description": "Array of headers\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "Header",
              "properties": [],
              "symbolDef": {
                "id": "60"
              }
            },
            "meta": []
          },
          {
            "name": "subheader",
            "type": "$$array",
            "description": "Array of sub headers\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "SubHeader",
              "properties": [],
              "symbolDef": {
                "id": "56"
              }
            },
            "meta": []
          },
          {
            "name": "anchors",
            "type": "AnchorRoot",
            "description": "Anchors, includes the icon, name, and url\n",
            "symbolDef": {
              "id": "69"
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface SidebarRoute",
    "canonical": "@xyd-js/sources/interfaces/SidebarRoute",
    "description": "Sidebar multi-group configuration\n",
    "context": {
      "symbolId": "42",
      "symbolName": "SidebarRoute",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 179,
      "col": 17,
      "signatureText": {
        "code": "export interface SidebarRoute {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface SidebarRoute {\n    /** Route for this sidebar group */\n    route: string\n\n    /** Sidebar items within this group */\n    items: Sidebar[]\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "route",
            "type": "string",
            "description": "Route for this sidebar group\n",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "items",
            "type": "$$array",
            "description": "Sidebar items within this group\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "Sidebar",
              "properties": [],
              "symbolDef": {
                "id": "45"
              }
            },
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Sidebar",
    "canonical": "@xyd-js/sources/interfaces/Sidebar",
    "description": "Sidebar configuration\n",
    "context": {
      "symbolId": "45",
      "symbolName": "Sidebar",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 190,
      "col": 17,
      "signatureText": {
        "code": "export interface Sidebar {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Sidebar {\n    /** The name of the group */\n    group?: string\n\n    /**\n     * The relative paths to the markdown files that will serve as pages.\n     * Note: groups are recursive, so to add a sub-folder add another group object in the page array.\n     */\n    pages?: PageURL[]\n\n    /**\n     * The icon of the group.\n     */\n    icon?: string\n\n    /**\n     * The sort order of the group.\n     */\n    sort?: number\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "group",
            "type": "string",
            "description": "The name of the group\n",
            "meta": []
          },
          {
            "name": "pages",
            "type": "$$array",
            "description": "The relative paths to the markdown files that will serve as pages.\nNote: groups are recursive, so to add a sub-folder add another group object in the page array.\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "PageURL",
              "properties": [],
              "symbolDef": {
                "id": "50"
              }
            },
            "meta": []
          },
          {
            "name": "icon",
            "type": "string",
            "description": "The icon of the group.\n",
            "meta": []
          },
          {
            "name": "sort",
            "type": "number",
            "description": "The sort order of the group.\n",
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Type PageURL",
    "canonical": "@xyd-js/sources/types/PageURL",
    "description": "Page URL type\n",
    "context": {
      "symbolId": "50",
      "symbolName": "PageURL",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 214,
      "col": 12,
      "signatureText": {
        "code": "export type PageURL = string | VirtualPage | Sidebar;",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type PageURL = string | VirtualPage | Sidebar",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "string | Sidebar",
          "description": "Page URL type\n",
          "symbolDef": {
            "id": [
              "45"
            ]
          },
          "meta": []
        }
      }
    ]
  },
  {
    "title": "Type VirtualPage",
    "canonical": "@xyd-js/sources/types/VirtualPage",
    "description": "Virtual page type\n\nVirtual pages are composition of pages, needed for templating e.g in uniform\n\nExample:\n\n{\n pages: [0\n   \".xyd/.cache/.content/docs/rest/todo:docs/rest/todo\",\n ]\n}\n\nabove will be rendered as docs/rest/todo.md using composition from xyd's \n`.content`\n",
    "context": {
      "symbolId": "51",
      "symbolName": "VirtualPage",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 233,
      "col": 12,
      "signatureText": {
        "code": "export type VirtualPage = string | {\n    virtual: string;\n    page: string;\n    templates?: string | string[];\n};",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type VirtualPage = string | {\n    /** The virtual page to use for the page */\n    virtual: string\n\n    /** The page to use for the page */\n    page: string\n\n    /** The template to use for the page */\n    templates?: string | string[]\n}",
        "lang": "ts"
      },
      "meta": [
        {
          "name": "internal",
          "value": "true"
        }
      ],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "string | string | {\n    virtual: string;\n    page: string;\n    templates?: string | string[];\n}",
          "description": "Virtual page type\n\nVirtual pages are composition of pages, needed for templating e.g in uniform\n\nExample:\n\n{\n pages: [0\n   \".xyd/.cache/.content/docs/rest/todo:docs/rest/todo\",\n ]\n}\n\nabove will be rendered as docs/rest/todo.md using composition from xyd's \n`.content`\n",
          "symbolDef": {
            "id": []
          },
          "meta": []
        }
      }
    ]
  },
  {
    "title": "Interface SubHeader",
    "canonical": "@xyd-js/sources/interfaces/SubHeader",
    "description": "Sub-header configuration\n",
    "context": {
      "symbolId": "56",
      "symbolName": "SubHeader",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 248,
      "col": 17,
      "signatureText": {
        "code": "export interface SubHeader {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface SubHeader {\n    /** Route for this sub-header */\n    route: string\n\n    /** Name of this sub-header */\n    name: string\n\n    /** Items within this sub-header */\n    items: Header[]\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "route",
            "type": "string",
            "description": "Route for this sub-header\n",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of this sub-header\n",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "items",
            "type": "$$array",
            "description": "Items within this sub-header\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "Header",
              "properties": [],
              "symbolDef": {
                "id": "60"
              }
            },
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Type Header",
    "canonical": "@xyd-js/sources/types/Header",
    "description": "Header configuration\n",
    "context": {
      "symbolId": "60",
      "symbolName": "Header",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 262,
      "col": 12,
      "signatureText": {
        "code": "export type Header = {\n    name?: string;\n    url?: string;\n    float?: \"right\";\n};",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type Header = {\n    /** The name of the button */\n    name?: string\n\n    /** The url once you click on the button */\n    url?: string\n\n    /** Float the header to the right */\n    float?: \"right\"\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the button\n",
            "meta": []
          },
          {
            "name": "url",
            "type": "string",
            "description": "The url once you click on the button\n",
            "meta": []
          },
          {
            "name": "float",
            "type": "\"right\"",
            "description": "Float the header to the right\n",
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Anchor",
    "canonical": "@xyd-js/sources/interfaces/Anchor",
    "description": "Anchor configuration\n",
    "context": {
      "symbolId": "65",
      "symbolName": "Anchor",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 276,
      "col": 17,
      "signatureText": {
        "code": "export interface Anchor {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Anchor {\n    /** The iconify icon name */\n    icon?: string\n\n    /** The name of the anchor label */\n    name?: string\n\n    /**\n     * The start of the URL that marks what pages go in the anchor.\n     * Generally, this is the name of the folder you put your pages in.\n     */\n    url?: string\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "icon",
            "type": "string",
            "description": "The iconify icon name\n",
            "meta": []
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name of the anchor label\n",
            "meta": []
          },
          {
            "name": "url",
            "type": "string",
            "description": "The start of the URL that marks what pages go in the anchor.\nGenerally, this is the name of the folder you put your pages in.\n",
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface AnchorRoot",
    "canonical": "@xyd-js/sources/interfaces/AnchorRoot",
    "description": "Anchor root configuration\n",
    "context": {
      "symbolId": "69",
      "symbolName": "AnchorRoot",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 293,
      "col": 17,
      "signatureText": {
        "code": "export interface AnchorRoot {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface AnchorRoot {\n    /** Bottom anchors */\n    bottom?: Anchor[]\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "bottom",
            "type": "$$array",
            "description": "Bottom anchors\n",
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "Anchor",
              "properties": [],
              "symbolDef": {
                "id": "65"
              }
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface API",
    "canonical": "@xyd-js/sources/interfaces/API",
    "description": "API configuration interface\n",
    "context": {
      "symbolId": "71",
      "symbolName": "API",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 305,
      "col": 17,
      "signatureText": {
        "code": "export interface API {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface API {\n    /**\n     * OpenAPI configuration\n     */\n    openapi?: APIFile\n\n    /**\n     * GraphQL configuration\n     */\n    graphql?: APIFile\n\n    /**\n     * Sources configuration\n     */\n    sources?: APIFile\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "openapi",
            "type": "APIFile",
            "description": "OpenAPI configuration\n",
            "symbolDef": {
              "id": "75"
            },
            "meta": []
          },
          {
            "name": "graphql",
            "type": "APIFile",
            "description": "GraphQL configuration\n",
            "symbolDef": {
              "id": "75"
            },
            "meta": []
          },
          {
            "name": "sources",
            "type": "APIFile",
            "description": "Sources configuration\n",
            "symbolDef": {
              "id": "75"
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Type APIFile",
    "canonical": "@xyd-js/sources/types/APIFile",
    "description": "API file configuration. Can be a path, an array of paths, a map of paths, or an advanced configuration\n",
    "context": {
      "symbolId": "75",
      "symbolName": "APIFile",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 325,
      "col": 12,
      "signatureText": {
        "code": "export type APIFile = string | string[] | APIFileMap | APIFileAdvanced;",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type APIFile = string | string[] | APIFileMap | APIFileAdvanced",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "string | string[] | APIFileMap | APIFileAdvanced",
          "description": "API file configuration. Can be a path, an array of paths, a map of paths, or an advanced configuration\n",
          "symbolDef": {
            "id": [
              "76",
              "80"
            ]
          },
          "meta": []
        }
      }
    ]
  },
  {
    "title": "Type APIFileMap",
    "canonical": "@xyd-js/sources/types/APIFileMap",
    "description": "API file map type\n",
    "context": {
      "symbolId": "76",
      "symbolName": "APIFileMap",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 330,
      "col": 12,
      "signatureText": {
        "code": "export type APIFileMap = {\n    [name: string]: string | APIFileAdvanced;\n};",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type APIFileMap = {\n    [name: string]: string | APIFileAdvanced\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "$$union",
          "description": "API file map type\n",
          "properties": [],
          "meta": [],
          "ofProperty": {
            "name": "",
            "type": "{\n    [name: string]: string | APIFileAdvanced;\n}",
            "description": ""
          }
        }
      }
    ]
  },
  {
    "title": "Type APIFileAdvanced",
    "canonical": "@xyd-js/sources/types/APIFileAdvanced",
    "description": "API file advanced type\n",
    "context": {
      "symbolId": "80",
      "symbolName": "APIFileAdvanced",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 337,
      "col": 12,
      "signatureText": {
        "code": "export type APIFileAdvanced = {\n    info?: APIInfo;\n    route: string;\n};",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type APIFileAdvanced = {\n    /** API information configuration */\n    info?: APIInfo\n\n    /** Route configuration */\n    route: string\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [
          {
            "name": "info",
            "type": "APIInfo",
            "description": "API information configuration\n",
            "symbolDef": {
              "id": "84"
            },
            "meta": []
          },
          {
            "name": "route",
            "type": "string",
            "description": "Route configuration\n",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Interface APIInfo",
    "canonical": "@xyd-js/sources/interfaces/APIInfo",
    "description": "API information configuration\n",
    "context": {
      "symbolId": "84",
      "symbolName": "APIInfo",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 352,
      "col": 17,
      "signatureText": {
        "code": "export interface APIInfo {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface APIInfo {\n    /**\n     * The base url for all API endpoints. If baseUrl is an array, it will enable\n     * for multiple base url options that the user can toggle.\n     */\n    baseUrl?: string\n\n    /** Authentication information */\n    auth?: APIAuth\n\n    /**\n     * The name of the authentication parameter used in the API playground.\n     * If method is basic, the format should be [usernameName]:[passwordName]\n     */\n    name?: string\n\n    /**\n     * The default value that's designed to be a prefisx for the authentication input field.\n     * E.g. If an inputPrefix of AuthKey would inherit the default input result of the authentication field as AuthKey.\n     */\n    inputPrefix?: string\n\n    /** Configurations for the API playground */\n    playground?: APIPlayground\n\n    /** Request configuration */\n    request?: APIInfoRequest\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "baseUrl",
            "type": "string",
            "description": "The base url for all API endpoints. If baseUrl is an array, it will enable\nfor multiple base url options that the user can toggle.\n",
            "meta": []
          },
          {
            "name": "auth",
            "type": "APIAuth",
            "description": "Authentication information\n",
            "symbolDef": {
              "id": "91"
            },
            "meta": []
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name of the authentication parameter used in the API playground.\nIf method is basic, the format should be [usernameName]:[passwordName]\n",
            "meta": []
          },
          {
            "name": "inputPrefix",
            "type": "string",
            "description": "The default value that's designed to be a prefisx for the authentication input field.\nE.g. If an inputPrefix of AuthKey would inherit the default input result of the authentication field as AuthKey.\n",
            "meta": []
          },
          {
            "name": "playground",
            "type": "APIPlayground",
            "description": "Configurations for the API playground\n",
            "symbolDef": {
              "id": "93"
            },
            "meta": []
          },
          {
            "name": "request",
            "type": "APIInfoRequest",
            "description": "Request configuration\n",
            "symbolDef": {
              "id": "95"
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface APIAuth",
    "canonical": "@xyd-js/sources/interfaces/APIAuth",
    "description": "API authentication configuration\n",
    "context": {
      "symbolId": "91",
      "symbolName": "APIAuth",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 384,
      "col": 17,
      "signatureText": {
        "code": "export interface APIAuth {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface APIAuth {\n    /** The authentication strategy used for all API endpoints */\n    method: \"bearer\" | \"basic\" | \"key\"\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "method",
            "type": "\"bearer\" | \"basic\" | \"key\"",
            "description": "The authentication strategy used for all API endpoints\n",
            "symbolDef": {
              "id": []
            },
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Interface APIPlayground",
    "canonical": "@xyd-js/sources/interfaces/APIPlayground",
    "description": "API playground configuration\n",
    "context": {
      "symbolId": "93",
      "symbolName": "APIPlayground",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 392,
      "col": 17,
      "signatureText": {
        "code": "export interface APIPlayground {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface APIPlayground {\n    /** Playground display mode */\n    mode?: \"show\" | \"simple\" | \"hide\"\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "mode",
            "type": "\"show\" | \"simple\" | \"hide\"",
            "description": "Playground display mode\n",
            "symbolDef": {
              "id": []
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface APIInfoRequest",
    "canonical": "@xyd-js/sources/interfaces/APIInfoRequest",
    "description": "API request configuration\n",
    "context": {
      "symbolId": "95",
      "symbolName": "APIInfoRequest",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 400,
      "col": 17,
      "signatureText": {
        "code": "export interface APIInfoRequest {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface APIInfoRequest {\n    /** Configurations for the auto-generated API request examples */\n    example?: {\n        /**\n         * An array of strings that determine the order of the languages of the auto-generated request examples.\n         * You can either define custom languages utilizing x-codeSamples or use our default languages which include\n         * bash, python, javascript, php, go, java\n         */\n        languages?: string[]\n    }\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "example",
            "type": "{\n    languages?: string[];\n}",
            "description": "Configurations for the auto-generated API request examples\n",
            "properties": [
              {
                "name": "languages",
                "type": "string[]",
                "description": "An array of strings that determine the order of the languages of the auto-generated request examples.\nYou can either define custom languages utilizing x-codeSamples or use our default languages which include\nbash, python, javascript, php, go, java\n",
                "meta": []
              }
            ],
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Integrations",
    "canonical": "@xyd-js/sources/interfaces/Integrations",
    "description": "Integrations configuration\n",
    "context": {
      "symbolId": "99",
      "symbolName": "Integrations",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 419,
      "col": 17,
      "signatureText": {
        "code": "export interface Integrations {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Integrations {\n    /**\n     * Configurations to add third-party analytics integrations.\n     * See full list of supported analytics here.\n     */\n    analytics?: IntegrationAnalytics\n\n    /**\n     * Configurations to add third-party search integrations.\n     * See full list of supported search here.\n     */\n    search?: IntegrationSearch\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "analytics",
            "type": "IntegrationAnalytics",
            "description": "Configurations to add third-party analytics integrations.\nSee full list of supported analytics here.\n",
            "symbolDef": {
              "id": "102"
            },
            "meta": []
          },
          {
            "name": "search",
            "type": "IntegrationSearch",
            "description": "Configurations to add third-party search integrations.\nSee full list of supported search here.\n",
            "symbolDef": {
              "id": "106"
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface IntegrationAnalytics",
    "canonical": "@xyd-js/sources/interfaces/IntegrationAnalytics",
    "description": "Analytics configuration\n",
    "context": {
      "symbolId": "102",
      "symbolName": "IntegrationAnalytics",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 437,
      "col": 17,
      "signatureText": {
        "code": "export interface IntegrationAnalytics {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface IntegrationAnalytics {\n    /** Livesession analytics configuration */\n    livesession?: {\n        /** Livesession's TrackID */\n        trackId: string\n    }\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "livesession",
            "type": "{\n    trackId: string;\n}",
            "description": "Livesession analytics configuration\n",
            "properties": [
              {
                "name": "trackId",
                "type": "string",
                "description": "Livesession's TrackID\n",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              }
            ],
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Interface IntegrationSearch",
    "canonical": "@xyd-js/sources/interfaces/IntegrationSearch",
    "description": "Search configuration\n",
    "context": {
      "symbolId": "106",
      "symbolName": "IntegrationSearch",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 449,
      "col": 17,
      "signatureText": {
        "code": "export interface IntegrationSearch {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface IntegrationSearch {\n    /** Algolia search configuration */\n    algolia?: {\n        /** Algolia application ID */\n        appId: string\n\n        /** Algolia API key */\n        apiKey: string\n    }\n\n    orama?: {\n        /** Orama endpoint */\n        endpoint: string\n\n        /** Orama API key */\n        apiKey: string\n\n        /** Orama suggestions */\n        suggestions?: string[]\n    } | boolean\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "algolia",
            "type": "{\n    appId: string;\n    apiKey: string;\n}",
            "description": "Algolia search configuration\n",
            "properties": [
              {
                "name": "appId",
                "type": "string",
                "description": "Algolia application ID\n",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              },
              {
                "name": "apiKey",
                "type": "string",
                "description": "Algolia API key\n",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              }
            ],
            "meta": []
          },
          {
            "name": "orama",
            "type": "boolean | {\n    endpoint: string;\n    apiKey: string;\n    suggestions?: string[];\n} | boolean",
            "description": "",
            "symbolDef": {
              "id": []
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Type Plugins",
    "canonical": "@xyd-js/sources/types/Plugins",
    "description": "Plugin configuration\n",
    "context": {
      "symbolId": "116",
      "symbolName": "Plugins",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 509,
      "col": 12,
      "signatureText": {
        "code": "export type Plugins = (string | PluginConfig)[];",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type Plugins = (string | PluginConfig)[]",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Types"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "$$array",
          "description": "Plugin configuration\n",
          "ofProperty": {
            "name": "",
            "description": "",
            "type": "string | PluginConfig",
            "properties": [],
            "symbolDef": {
              "id": [
                "117"
              ]
            }
          },
          "meta": []
        }
      }
    ]
  },
  {
    "title": "Type PluginConfig",
    "canonical": "@xyd-js/sources/types/PluginConfig",
    "description": "",
    "context": {
      "symbolId": "117",
      "symbolName": "PluginConfig",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 511,
      "col": 12,
      "signatureText": {
        "code": "export type PluginConfig<PluginName extends string = string, PluginArgs extends unknown[] = unknown[]> = [\n    PluginName,\n    ...PluginArgs\n];",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type PluginConfig<\n    PluginName extends string = string,\n    PluginArgs extends unknown[] = unknown[]\n> = [PluginName, ...PluginArgs]",
        "lang": "ts"
      },
      "meta": []
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "[PluginName, PluginArgs[]]",
          "description": "",
          "symbolDef": {
            "id": [
              "118",
              "119"
            ]
          },
          "meta": []
        }
      }
    ]
  },
  {
    "title": "Interface Redirects",
    "canonical": "@xyd-js/sources/interfaces/Redirects",
    "description": "Redirects configuration\n",
    "context": {
      "symbolId": "120",
      "symbolName": "Redirects",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 523,
      "col": 17,
      "signatureText": {
        "code": "export interface Redirects {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Redirects {\n    /** Source path to redirect from */\n    source: string\n\n    /** Destination path to redirect to */\n    destination: string\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "source",
            "type": "string",
            "description": "Source path to redirect from\n",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "destination",
            "type": "string",
            "description": "Destination path to redirect to\n",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Interface SEO",
    "canonical": "@xyd-js/sources/interfaces/SEO",
    "description": "SEO configuration\n",
    "context": {
      "symbolId": "123",
      "symbolName": "SEO",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 534,
      "col": 17,
      "signatureText": {
        "code": "export interface SEO {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface SEO {\n    /**\n     * Domain name\n     */\n    domain?: string\n\n    /**\n     * Meta tags\n     */\n    metatags?: {[tag: string]: string} // TODO: in the future type-safe\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "domain",
            "type": "string",
            "description": "Domain name\n",
            "meta": []
          },
          {
            "name": "metatags",
            "type": "$$union",
            "description": "Meta tags\n",
            "properties": [],
            "meta": [],
            "ofProperty": {
              "name": "",
              "type": "{\n    [tag: string]: string;\n}",
              "description": ""
            }
          }
        ]
      }
    ]
  },
  {
    "title": "Interface Engine",
    "canonical": "@xyd-js/sources/interfaces/Engine",
    "description": "Config configuration\n",
    "context": {
      "symbolId": "129",
      "symbolName": "Engine",
      "symbolKind": 256,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 552,
      "col": 17,
      "signatureText": {
        "code": "export interface Engine {\n}",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export interface Engine {\n    /**\n     * Path aliases for imports. Avoid long relative paths by creating shortcuts.\n     *\n     * @example\n     * ```json\n     * {\n     *   \"paths\": {\n     *     \"@my-package/*\": [\"../my-package/src/*\"],\n     *     \"@livesession-go/*\": [\"https://github.com/livesession/livesession-go/*\"]\n     *   }\n     * }\n     * ```\n     *\n     * Usage:\n     * ```typescript\n     * // Instead of\n     * @importCode(\"../../../my-package/src/components/Badge.tsx\")\n     *\n     * // Use\n     * @importCode(\"@my-package/src/components/Badge.tsx\")\n     * ```\n     */\n    paths?: EnginePaths\n\n    /**\n     * @unsafe\n     *\n     * Uniform configuration\n     *\n     */\n    uniform?: EngineUniform\n}",
        "lang": "ts"
      },
      "meta": [],
      "group": [
        "@xyd-js",
        "sources",
        "Interfaces"
      ]
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Properties",
        "properties": [
          {
            "name": "paths",
            "type": "EnginePaths",
            "description": "Path aliases for imports. Avoid long relative paths by creating shortcuts.\n",
            "symbolDef": {
              "id": "132"
            },
            "meta": [],
            "examples": [
              "```json\n{\n  \"paths\": {\n    \"@my-package/*\": [\"../my-package/src/*\"],\n    \"@livesession-go/*\": [\"https://github.com/livesession/livesession-go/*\"]\n  }\n}",
              "```typescript\n// Instead of\n@importCode(\"../../../my-package/src/components/Badge.tsx\")\n\n// Use\n@importCode(\"@my-package/src/components/Badge.tsx\")"
            ]
          },
          {
            "name": "uniform",
            "type": "EngineUniform",
            "description": "",
            "symbolDef": {
              "id": "136"
            },
            "meta": []
          }
        ]
      }
    ]
  },
  {
    "title": "Type EnginePaths",
    "canonical": "@xyd-js/sources/types/EnginePaths",
    "description": "",
    "context": {
      "symbolId": "132",
      "symbolName": "EnginePaths",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 586,
      "col": 12,
      "signatureText": {
        "code": "export type EnginePaths = {\n    [key: string]: string[];\n};",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type EnginePaths = { [key: string]: string[] }",
        "lang": "ts"
      },
      "meta": []
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [],
        "rootProperty": {
          "name": "",
          "type": "$$union",
          "description": "",
          "properties": [],
          "meta": [],
          "ofProperty": {
            "name": "",
            "type": "{\n    [key: string]: string[];\n}",
            "description": ""
          }
        }
      }
    ]
  },
  {
    "title": "Type EngineUniform",
    "canonical": "@xyd-js/sources/types/EngineUniform",
    "description": "",
    "context": {
      "symbolId": "136",
      "symbolName": "EngineUniform",
      "symbolKind": 2097152,
      "packageName": "@xyd-js/sources",
      "fileName": "settings.ts",
      "fileFullPath": "src/settings.ts",
      "line": 588,
      "col": 12,
      "signatureText": {
        "code": "export type EngineUniform = {\n    store?: boolean;\n};",
        "lang": "ts"
      },
      "sourcecode": {
        "code": "export type EngineUniform = {\n    /**\n     * If `true` then virtual pages will not created and generated content will be stored on disk\n     */\n    store?: boolean\n}",
        "lang": "ts"
      },
      "meta": []
    },
    "examples": {
      "groups": []
    },
    "definitions": [
      {
        "title": "Type Definition",
        "properties": [
          {
            "name": "store",
            "type": "boolean",
            "description": "If \n`true`\n then virtual pages will not created and generated content will be stored on disk\n",
            "meta": []
          }
        ]
      }
    ]
  }
]