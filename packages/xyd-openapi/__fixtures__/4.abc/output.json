[
  {
    "title": "Creates a model response. Provide [text](/docs/guides/text) or\n[image](/docs/guides/images) inputs to generate [text](/docs/guides/text)\nor [JSON](/docs/guides/structured-outputs) outputs. Have the model call\nyour own [custom code](/docs/guides/function-calling) or use built-in\n[tools](/docs/guides/tools) like [web search](/docs/guides/tools-web-search)\nor [file search](/docs/guides/tools-file-search) to use your own data\nas input for the model's response.\n",
    "canonical": "createResponse",
    "description": "Creates a model response. Provide [text](/docs/guides/text) or\n[image](/docs/guides/images) inputs to generate [text](/docs/guides/text)\nor [JSON](/docs/guides/structured-outputs) outputs. Have the model call\nyour own [custom code](/docs/guides/function-calling) or use built-in\n[tools](/docs/guides/tools) like [web search](/docs/guides/tools-web-search)\nor [file search](/docs/guides/tools-file-search) to use your own data\nas input for the model's response.\n",
    "type": "rest_post",
    "category": "rest",
    "context": {
      "method": "post",
      "path": "/responses",
      "fullPath": "https:/api.openai.com/v1/responses",
      "group": [
        "Responses"
      ],
      "scopes": []
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request POST \\\n     --url https://api.openai.com/v1/responses \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"text\": {\n    \"format\": {\n      \"type\": \"text\"\n    }\n  }\n}\n'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({text: {format: {type: 'text'}}})\n};\n\nfetch('https://api.openai.com/v1/responses', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.openai.com/v1/responses\"\n\npayload = { \"text\": { \"format\": { \"type\": \"text\" } } }\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openai.com/v1/responses\"\n\n\tpayload := strings.NewReader(\"{\\\"text\\\":{\\\"format\\\":{\\\"type\\\":\\\"text\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Request body",
        "properties": [
          {
            "name": "text",
            "type": "object",
            "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)\n",
            "meta": [],
            "properties": [
              {
                "name": "format",
                "type": "$$xor",
                "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \nwhich ensures the model will match your supplied JSON schema. Learn more in the \n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
                "properties": [
                  {
                    "name": "Text",
                    "type": "object",
                    "description": "Default response format. Used to generate text responses.\n",
                    "meta": [],
                    "properties": [
                      {
                        "name": "type",
                        "type": "$$enum",
                        "description": "The type of response format being defined. Always `text`.",
                        "meta": [
                          {
                            "name": "required",
                            "value": "true"
                          },
                          {
                            "name": "enum-type",
                            "value": "string"
                          }
                        ],
                        "properties": [
                          {
                            "name": "text",
                            "type": "string",
                            "description": "",
                            "meta": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "JSON schema",
                    "type": "object",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "meta": [],
                    "properties": [
                      {
                        "name": "type",
                        "type": "$$enum",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "meta": [
                          {
                            "name": "required",
                            "value": "true"
                          },
                          {
                            "name": "enum-type",
                            "value": "string"
                          }
                        ],
                        "properties": [
                          {
                            "name": "json_schema",
                            "type": "string",
                            "description": "",
                            "meta": []
                          }
                        ]
                      },
                      {
                        "name": "description",
                        "type": "string",
                        "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
                        "meta": []
                      },
                      {
                        "name": "name",
                        "type": "string",
                        "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
                        "meta": [
                          {
                            "name": "required",
                            "value": "true"
                          }
                        ]
                      },
                      {
                        "name": "schema",
                        "type": "object",
                        "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                        "meta": [
                          {
                            "name": "required",
                            "value": "true"
                          }
                        ]
                      },
                      {
                        "name": "strict",
                        "type": "boolean",
                        "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n",
                        "meta": [
                          {
                            "name": "defaults",
                            "value": false
                          },
                          {
                            "name": "nullable",
                            "value": "true"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "JSON object",
                    "type": "object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "meta": [],
                    "properties": [
                      {
                        "name": "type",
                        "type": "$$enum",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "meta": [
                          {
                            "name": "required",
                            "value": "true"
                          },
                          {
                            "name": "enum-type",
                            "value": "string"
                          }
                        ],
                        "properties": [
                          {
                            "name": "json_object",
                            "type": "string",
                            "description": "",
                            "meta": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "meta": [
          {
            "name": "contentType",
            "value": "application/json"
          },
          {
            "name": "required",
            "value": "true"
          }
        ]
      }
    ]
  }
]