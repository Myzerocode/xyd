# TODO: !!! case with circular dependencies !!!

"""
A book type
"""
type Book {
    """
    The title of the book
    """
    title: String

    """
    The author of the book
    """
    author_name: String
    #    author: Author
}

"""
An author type
"""
type Author {
    """
    The name of the author
    """
    name: String

    """
    The books of the author
    """
    books: [String]
    #    books: [Book]
}

"""
A nested book type
"""
input NestedBook {
    """
    The date of the book
    """
    date: String
}

"""
The input object for the getBook query
"""
input BookInput {
    """
    The title of the book
    """
    title: String

    """
    The author of the book
    """
    nestedBook: NestedBook
}

type Query {
    #    books: [Book]
    #    authors: [Author]
    """
    Get a book by title
    """
    getBook(
        """
        The title of the book
        """
        title: String

        """
        The author of the book
        """
        input: BookInput
    ): Book
}

type Mutation {
    """
    Add a book
    """
    addBook(title: String, author: String): Book

    """
    Add an author
    """
    addAuthor(name: String): Author
}