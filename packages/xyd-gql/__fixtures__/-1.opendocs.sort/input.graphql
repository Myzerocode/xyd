extend schema @docs(
    sort: [
        {
            node: "scalar",
        },
        {
            node: "enum",
        },
        {
            node: "interface",
        },
        {
            node: "input",
        },
        {
            node: "object",
        },
        {
            node: "union",
        },
        {
            node: "query",
        },
        {
            node: "mutation",
        },
        {
            node: "subscription",
        }
    ]
)

# Custom scalar
scalar DateTime

# Enum
enum UserRole {
    ADMIN
    USER
    GUEST
}

# Interface
interface Node {
    id: ID!
}

# Input object
input UserInput {
    name: String!
    email: String!
    role: UserRole
}

# Object
type User implements Node {
    id: ID!
    name: String!
    email: String!
    role: UserRole!
    createdAt: DateTime!
}

# Union
union SearchResult = User | Post

type Post implements Node {
    id: ID!
    title: String!
    content: String!
    author: User!
}

# Query
type Query {
    user(id: ID!): User
    users: [User!]!
    search(query: String!): [SearchResult!]!
}

# Mutation
type Mutation {
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UserInput!): User!
}

# Subscription
type Subscription {
    userCreated: User!
    userUpdated: User!
}

